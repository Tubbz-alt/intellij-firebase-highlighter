/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

// Copyright 2000-2020 JetBrains s.r.o. and other contributors. Use of this source code is governed by the Apache 2.0 license that can be found in the LICENSE file.
package co.anbora.labs.firebase.syntax;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import static co.anbora.labs.firebase.syntax.psi.FirebaseRulesTypes.*;
import com.intellij.psi.TokenType;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>FirebaseRules.flex</tt>
 */
class FirebaseRulesLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [9, 6, 6]
   * Total runtime size is 1568 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[ZZ_CMAP_Z[ch>>12]|((ch>>6)&0x3f)]<<6)|(ch&0x3f)];
  }

  /* The ZZ_CMAP_Z table has 272 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\100\1\200\u010d\100");

  /* The ZZ_CMAP_Y table has 192 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\1\2\175\3\1\4\77\3");

  /* The ZZ_CMAP_A table has 320 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\2\4\1\22\0\1\2\1\47\1\12\1\4\2\0\1\51\1\10\1\54\1\55\1\42\1\0\1\44"+
    "\1\60\1\7\1\14\1\6\2\36\7\6\1\61\1\62\1\52\1\13\1\53\2\0\32\3\1\56\1\11\1"+
    "\57\1\0\1\33\1\0\1\31\1\30\1\15\1\21\1\25\1\22\1\32\1\46\1\23\2\3\1\16\1\45"+
    "\1\35\1\17\1\40\1\3\1\24\1\26\1\27\1\20\1\34\1\37\3\3\1\41\1\50\1\43\7\0\1"+
    "\5\242\0\2\5\26\0");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\3\1\5\2\1"+
    "\1\6\1\7\15\3\1\10\1\11\1\12\1\3\3\1"+
    "\1\13\1\14\1\15\1\16\1\17\1\20\1\3\1\21"+
    "\1\22\1\23\1\24\1\0\1\25\4\0\1\26\7\3"+
    "\1\27\10\3\1\0\1\3\1\30\1\31\1\32\1\33"+
    "\1\34\1\35\1\36\12\3\1\37\2\3\1\0\1\40"+
    "\6\3\1\41\2\3\1\42\1\3\1\0\3\3\1\43"+
    "\2\3\1\44\1\0\2\3\1\0\1\45\1\0\1\3"+
    "\1\23\3\3\10\0\1\3\1\23\2\3\1\46\10\0"+
    "\1\3\1\23\2\3\3\0\1\37\2\0\1\3\1\23"+
    "\1\0\1\3\1\23\1\3\2\0\1\3\1\23\1\0"+
    "\1\3\1\23\1\3\1\0\1\3\1\23\1\0\1\3"+
    "\1\23\1\3\1\0\1\3\1\23\1\0\1\3\1\23"+
    "\1\3\1\0\1\3\1\23\1\0\1\3\1\23\1\47"+
    "\1\0\1\3\1\23\1\0\1\3\1\23\3\50";

  private static int [] zzUnpackAction() {
    int [] result = new int[194];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\63\0\146\0\231\0\314\0\377\0\63\0\u0132"+
    "\0\u0165\0\u0198\0\63\0\u01cb\0\u01fe\0\u0231\0\u0264\0\u0297"+
    "\0\u02ca\0\u02fd\0\u0330\0\u0363\0\u0396\0\u03c9\0\u03fc\0\u042f"+
    "\0\u0462\0\63\0\231\0\u0495\0\u04c8\0\u04fb\0\u052e\0\u0561"+
    "\0\u0594\0\63\0\63\0\63\0\63\0\u05c7\0\63\0\63"+
    "\0\u05fa\0\u062d\0\u0660\0\63\0\u0693\0\u06c6\0\u0165\0\u06f9"+
    "\0\u05fa\0\u072c\0\u075f\0\u0792\0\u07c5\0\u07f8\0\u082b\0\u085e"+
    "\0\231\0\u0891\0\u08c4\0\u08f7\0\u092a\0\u095d\0\u0990\0\u09c3"+
    "\0\u09f6\0\u0a29\0\u0a5c\0\63\0\63\0\63\0\63\0\63"+
    "\0\63\0\63\0\u0a8f\0\u0ac2\0\u0af5\0\u0b28\0\u0b5b\0\u0b8e"+
    "\0\u0bc1\0\u0bf4\0\u0c27\0\u0c5a\0\u0c8d\0\u0cc0\0\u0cf3\0\u0d26"+
    "\0\63\0\u0d59\0\u0d8c\0\u0dbf\0\u0df2\0\u0e25\0\u0e58\0\231"+
    "\0\u0e8b\0\u0ebe\0\231\0\u0ef1\0\u0f24\0\u0f57\0\u0f8a\0\u0fbd"+
    "\0\231\0\u0ff0\0\u1023\0\231\0\u1056\0\u1089\0\u10bc\0\u10ef"+
    "\0\231\0\u1122\0\u1155\0\u1188\0\u11bb\0\u11ee\0\u1221\0\u1254"+
    "\0\u1287\0\u12ba\0\u12ed\0\u1320\0\u1353\0\u1386\0\u13b9\0\u13ec"+
    "\0\u141f\0\u1452\0\u1485\0\231\0\u14b8\0\u14eb\0\u151e\0\u1551"+
    "\0\u1584\0\u15b7\0\u15ea\0\u161d\0\u1650\0\u1683\0\u16b6\0\u16e9"+
    "\0\u171c\0\u174f\0\u1782\0\u17b5\0\u17e8\0\u181b\0\u184e\0\u1881"+
    "\0\u18b4\0\u18e7\0\u191a\0\u194d\0\u1980\0\u19b3\0\u19e6\0\u1a19"+
    "\0\u1a4c\0\u1a7f\0\u1ab2\0\u1ae5\0\u1b18\0\u1b4b\0\u1b7e\0\u1bb1"+
    "\0\u1be4\0\u1c17\0\u1c4a\0\u1c7d\0\u1cb0\0\u1ce3\0\u1d16\0\u1d49"+
    "\0\u1d7c\0\u1daf\0\u1de2\0\u1e15\0\u1e48\0\u1e7b\0\u1eae\0\u1ee1"+
    "\0\231\0\u1f14\0\u1f47\0\u1f7a\0\u1fad\0\u1fe0\0\u2013\0\63"+
    "\0\231\0\u05fa";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[194];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\4\1\5\1\2\1\6\1\7\1\10"+
    "\1\2\1\11\1\12\1\13\1\14\1\15\1\4\1\16"+
    "\1\17\1\20\1\21\1\22\1\4\1\23\1\24\1\4"+
    "\1\25\1\26\2\4\1\27\1\6\1\30\1\4\1\31"+
    "\1\2\1\32\1\33\1\34\1\4\1\35\1\36\1\37"+
    "\1\40\1\41\1\42\1\43\1\44\1\45\1\46\1\47"+
    "\1\50\64\0\2\3\63\0\1\4\2\0\1\4\4\0"+
    "\1\51\1\0\24\4\3\0\3\4\11\0\1\4\2\0"+
    "\1\5\1\0\3\5\1\0\55\5\3\0\1\4\2\0"+
    "\1\6\1\52\3\0\1\51\1\0\21\4\1\6\2\4"+
    "\3\0\3\4\11\0\1\4\2\0\10\53\1\54\1\55"+
    "\24\53\1\56\24\53\11\57\1\60\1\54\50\57\3\0"+
    "\1\51\2\0\1\51\4\0\1\61\1\0\24\51\3\0"+
    "\3\51\11\0\1\51\5\0\1\4\2\0\1\4\4\0"+
    "\1\51\1\0\1\4\1\62\5\4\1\63\14\4\3\0"+
    "\3\4\11\0\1\4\5\0\1\4\2\0\1\4\4\0"+
    "\1\51\1\0\6\4\1\64\15\4\3\0\3\4\11\0"+
    "\1\4\5\0\1\4\2\0\1\4\4\0\1\51\1\0"+
    "\23\4\1\65\3\0\3\4\11\0\1\4\5\0\1\4"+
    "\2\0\1\4\4\0\1\51\1\0\10\4\1\66\13\4"+
    "\3\0\3\4\11\0\1\4\5\0\1\4\2\0\1\4"+
    "\4\0\1\51\1\0\6\4\1\67\5\4\1\70\7\4"+
    "\3\0\3\4\11\0\1\4\5\0\1\4\2\0\1\4"+
    "\4\0\1\51\1\0\5\4\1\71\16\4\3\0\3\4"+
    "\11\0\1\4\5\0\1\4\2\0\1\4\4\0\1\51"+
    "\1\0\3\4\1\72\4\4\1\73\13\4\3\0\3\4"+
    "\11\0\1\4\5\0\1\4\2\0\1\4\4\0\1\51"+
    "\1\0\10\4\1\74\13\4\3\0\3\4\11\0\1\4"+
    "\5\0\1\4\2\0\1\4\4\0\1\51\1\0\7\4"+
    "\1\75\14\4\3\0\3\4\11\0\1\4\5\0\1\4"+
    "\2\0\1\4\4\0\1\51\1\0\1\4\1\76\22\4"+
    "\3\0\3\4\11\0\1\4\5\0\1\4\2\0\1\4"+
    "\4\0\1\51\1\0\10\4\1\77\13\4\3\0\3\4"+
    "\11\0\1\4\5\0\1\4\2\0\1\4\4\0\1\51"+
    "\1\0\3\4\1\100\20\4\3\0\3\4\11\0\1\4"+
    "\5\0\1\4\2\0\1\4\4\0\1\51\1\0\7\4"+
    "\1\101\14\4\3\0\3\4\11\0\1\4\5\0\1\102"+
    "\2\0\1\102\6\0\24\102\3\0\3\102\11\0\1\102"+
    "\5\0\1\4\2\0\1\4\4\0\1\51\1\0\14\4"+
    "\1\103\7\4\3\0\3\4\11\0\1\4\15\0\1\104"+
    "\117\0\1\105\63\0\1\106\24\0\1\107\62\0\1\110"+
    "\52\0\1\4\2\0\1\4\4\0\1\51\1\0\24\4"+
    "\3\0\3\4\4\0\1\111\4\0\1\4\5\0\1\51"+
    "\2\0\1\51\4\0\1\51\1\0\24\51\3\0\3\51"+
    "\11\0\1\51\10\0\1\52\27\0\1\52\24\0\10\53"+
    "\1\54\1\55\52\53\1\0\3\53\1\0\65\53\1\112"+
    "\1\55\51\53\1\57\1\0\3\57\1\0\55\57\3\0"+
    "\1\4\2\0\1\4\4\0\1\51\1\0\2\4\1\113"+
    "\21\4\3\0\3\4\11\0\1\4\5\0\1\4\2\0"+
    "\1\4\4\0\1\51\1\0\10\4\1\114\13\4\3\0"+
    "\3\4\11\0\1\4\5\0\1\4\2\0\1\4\4\0"+
    "\1\51\1\0\11\4\1\77\12\4\3\0\3\4\11\0"+
    "\1\4\5\0\1\4\2\0\1\4\4\0\1\51\1\0"+
    "\4\4\1\114\17\4\3\0\3\4\11\0\1\4\5\0"+
    "\1\4\2\0\1\4\4\0\1\51\1\0\1\4\1\115"+
    "\22\4\3\0\3\4\11\0\1\4\5\0\1\4\2\0"+
    "\1\4\4\0\1\51\1\0\7\4\1\116\14\4\3\0"+
    "\3\4\11\0\1\4\5\0\1\4\2\0\1\4\4\0"+
    "\1\51\1\0\1\4\1\117\22\4\3\0\3\4\11\0"+
    "\1\4\5\0\1\4\2\0\1\4\4\0\1\51\1\0"+
    "\1\4\1\120\22\4\3\0\3\4\11\0\1\4\5\0"+
    "\1\4\2\0\1\4\4\0\1\51\1\0\14\4\1\121"+
    "\7\4\3\0\3\4\11\0\1\4\5\0\1\4\2\0"+
    "\1\4\4\0\1\51\1\0\7\4\1\122\14\4\3\0"+
    "\3\4\11\0\1\4\5\0\1\4\2\0\1\4\4\0"+
    "\1\51\1\0\3\4\1\123\20\4\3\0\3\4\11\0"+
    "\1\4\5\0\1\4\2\0\1\4\4\0\1\51\1\0"+
    "\1\4\1\124\22\4\3\0\3\4\11\0\1\4\5\0"+
    "\1\4\2\0\1\4\4\0\1\51\1\0\12\4\1\125"+
    "\11\4\3\0\3\4\11\0\1\4\5\0\1\4\2\0"+
    "\1\4\4\0\1\51\1\0\1\4\1\126\22\4\3\0"+
    "\3\4\11\0\1\4\5\0\1\4\2\0\1\4\4\0"+
    "\1\51\1\0\6\4\1\127\15\4\3\0\3\4\11\0"+
    "\1\4\5\0\1\102\2\0\1\102\4\0\1\130\1\0"+
    "\24\102\2\0\1\131\3\102\11\0\1\102\5\0\1\4"+
    "\2\0\1\4\4\0\1\51\1\0\12\4\1\132\11\4"+
    "\3\0\3\4\11\0\1\4\5\0\1\4\2\0\1\4"+
    "\4\0\1\51\1\0\3\4\1\133\20\4\3\0\3\4"+
    "\11\0\1\4\5\0\1\4\2\0\1\4\4\0\1\51"+
    "\1\0\14\4\1\127\7\4\3\0\3\4\11\0\1\4"+
    "\5\0\1\4\2\0\1\4\4\0\1\51\1\0\10\4"+
    "\1\127\13\4\3\0\3\4\11\0\1\4\5\0\1\4"+
    "\2\0\1\4\4\0\1\51\1\0\10\4\1\134\13\4"+
    "\3\0\3\4\11\0\1\4\5\0\1\4\2\0\1\4"+
    "\4\0\1\51\1\0\11\4\1\135\12\4\3\0\3\4"+
    "\11\0\1\4\5\0\1\4\2\0\1\4\4\0\1\51"+
    "\1\0\10\4\1\136\13\4\3\0\3\4\11\0\1\4"+
    "\5\0\1\4\2\0\1\4\4\0\1\51\1\0\4\4"+
    "\1\125\17\4\3\0\3\4\11\0\1\4\5\0\1\4"+
    "\2\0\1\4\4\0\1\51\1\0\17\4\1\137\4\4"+
    "\3\0\3\4\11\0\1\4\5\0\1\4\2\0\1\4"+
    "\4\0\1\51\1\0\10\4\1\140\13\4\3\0\3\4"+
    "\11\0\1\4\5\0\1\4\2\0\1\4\4\0\1\51"+
    "\1\0\2\4\1\141\21\4\3\0\3\4\11\0\1\4"+
    "\5\0\1\4\2\0\1\4\4\0\1\51\1\0\24\4"+
    "\3\0\1\142\2\4\11\0\1\4\5\0\1\4\2\0"+
    "\1\4\4\0\1\51\1\0\1\4\1\143\22\4\3\0"+
    "\3\4\11\0\1\4\5\0\1\4\2\0\1\4\4\0"+
    "\1\51\1\0\12\4\1\144\11\4\3\0\3\4\11\0"+
    "\1\4\44\0\1\145\23\0\1\4\2\0\1\4\4\0"+
    "\1\51\1\0\1\146\23\4\3\0\3\4\11\0\1\4"+
    "\5\0\1\4\2\0\1\4\4\0\1\51\1\0\4\4"+
    "\1\147\17\4\3\0\3\4\11\0\1\4\5\0\1\4"+
    "\2\0\1\4\4\0\1\51\1\0\13\4\1\150\10\4"+
    "\3\0\3\4\11\0\1\4\5\0\1\4\2\0\1\4"+
    "\4\0\1\51\1\0\10\4\1\151\13\4\3\0\3\4"+
    "\11\0\1\4\5\0\1\4\2\0\1\4\4\0\1\51"+
    "\1\0\11\4\1\152\12\4\3\0\3\4\11\0\1\4"+
    "\5\0\1\4\2\0\1\4\4\0\1\51\1\0\6\4"+
    "\1\153\15\4\3\0\3\4\11\0\1\4\5\0\1\4"+
    "\2\0\1\4\4\0\1\51\1\0\22\4\1\154\1\4"+
    "\3\0\3\4\11\0\1\4\3\0\2\155\1\4\2\0"+
    "\1\4\4\0\1\51\1\0\1\156\1\15\1\4\1\16"+
    "\1\17\2\4\1\157\5\4\1\26\4\4\1\30\1\4"+
    "\3\0\3\4\11\0\1\4\5\0\1\4\2\0\1\4"+
    "\4\0\1\51\1\0\10\4\1\125\13\4\3\0\3\4"+
    "\11\0\1\4\44\0\1\160\23\0\1\4\2\0\1\4"+
    "\4\0\1\51\1\0\24\4\3\0\2\4\1\161\11\0"+
    "\1\4\2\0\1\162\1\0\1\162\1\163\1\162\1\0"+
    "\1\163\4\162\1\164\1\162\24\163\3\162\3\163\11\162"+
    "\1\163\2\162\3\0\1\4\2\0\1\4\4\0\1\51"+
    "\1\0\14\4\1\165\7\4\3\0\3\4\11\0\1\4"+
    "\5\0\1\4\2\0\1\4\4\0\1\51\1\0\16\4"+
    "\1\166\5\4\3\0\3\4\11\0\1\4\5\0\1\4"+
    "\2\0\1\4\4\0\1\51\1\0\1\167\23\4\3\0"+
    "\3\4\11\0\1\4\3\0\2\155\12\0\1\170\1\171"+
    "\1\0\1\172\1\173\2\0\1\174\5\0\1\175\4\0"+
    "\1\176\26\0\1\4\2\0\1\4\4\0\1\51\1\0"+
    "\7\4\1\63\14\4\3\0\3\4\11\0\1\4\5\0"+
    "\1\4\2\0\1\4\4\0\1\51\1\0\10\4\1\73"+
    "\13\4\3\0\3\4\11\0\1\4\45\0\1\131\41\0"+
    "\1\177\43\0\1\4\2\0\1\4\4\0\1\51\1\0"+
    "\5\4\1\200\16\4\3\0\3\4\11\0\1\4\5\0"+
    "\1\51\2\0\1\51\4\0\1\51\1\0\5\51\1\201"+
    "\16\51\3\0\3\51\11\0\1\51\5\0\1\4\2\0"+
    "\1\4\4\0\1\51\1\0\11\4\1\202\12\4\3\0"+
    "\3\4\11\0\1\4\5\0\1\4\2\0\1\4\4\0"+
    "\1\51\1\0\17\4\1\203\4\4\3\0\3\4\11\0"+
    "\1\4\5\0\1\4\2\0\1\4\4\0\1\51\1\0"+
    "\10\4\1\204\13\4\3\0\3\4\11\0\1\4\26\0"+
    "\1\205\61\0\1\206\77\0\1\207\47\0\1\210\62\0"+
    "\1\211\62\0\1\212\61\0\1\213\61\0\1\214\42\0"+
    "\1\4\2\0\1\4\4\0\1\51\1\0\6\4\1\215"+
    "\15\4\3\0\3\4\11\0\1\4\5\0\1\51\2\0"+
    "\1\51\4\0\1\51\1\0\6\51\1\216\15\51\3\0"+
    "\3\51\11\0\1\51\5\0\1\4\2\0\1\4\4\0"+
    "\1\51\1\0\10\4\1\217\13\4\3\0\3\4\11\0"+
    "\1\4\5\0\1\4\2\0\1\4\4\0\1\51\1\0"+
    "\10\4\1\220\13\4\3\0\3\4\11\0\1\4\27\0"+
    "\1\221\63\0\1\212\55\0\1\221\57\0\1\222\75\0"+
    "\1\223\60\0\1\224\56\0\1\225\63\0\1\226\41\0"+
    "\1\4\2\0\1\4\4\0\1\51\1\0\7\4\1\227"+
    "\14\4\3\0\3\4\11\0\1\4\5\0\1\51\2\0"+
    "\1\51\4\0\1\51\1\0\7\51\1\230\14\51\3\0"+
    "\3\51\11\0\1\51\2\0\1\231\1\0\1\231\1\232"+
    "\1\231\1\0\1\232\4\231\1\233\1\231\24\232\3\231"+
    "\3\232\11\231\1\232\2\231\3\0\1\4\2\0\1\4"+
    "\4\0\1\51\1\0\7\4\1\234\14\4\3\0\3\4"+
    "\11\0\1\4\33\0\1\225\56\0\1\225\56\0\1\224"+
    "\105\0\1\155\45\0\1\235\60\0\1\236\40\0\1\4"+
    "\2\0\1\4\4\0\1\51\1\0\10\4\1\237\13\4"+
    "\3\0\3\4\11\0\1\4\5\0\1\51\2\0\1\51"+
    "\4\0\1\51\1\0\10\51\1\240\13\51\3\0\3\51"+
    "\11\0\1\51\30\0\1\241\37\0\1\4\2\0\1\4"+
    "\4\0\1\51\1\0\11\4\1\242\12\4\3\0\3\4"+
    "\11\0\1\4\5\0\1\51\2\0\1\51\4\0\1\51"+
    "\1\0\11\51\1\243\12\51\3\0\3\51\11\0\1\51"+
    "\5\0\1\4\2\0\1\4\4\0\1\51\1\0\11\4"+
    "\1\244\12\4\3\0\3\4\11\0\1\4\27\0\1\224"+
    "\63\0\1\245\37\0\1\4\2\0\1\4\4\0\1\51"+
    "\1\0\11\4\1\246\12\4\3\0\3\4\11\0\1\4"+
    "\5\0\1\51\2\0\1\51\4\0\1\51\1\0\11\51"+
    "\1\247\12\51\3\0\3\51\11\0\1\51\31\0\1\250"+
    "\36\0\1\4\2\0\1\4\4\0\1\51\1\0\12\4"+
    "\1\251\11\4\3\0\3\4\11\0\1\4\5\0\1\51"+
    "\2\0\1\51\4\0\1\51\1\0\12\51\1\252\11\51"+
    "\3\0\3\51\11\0\1\51\5\0\1\4\2\0\1\4"+
    "\4\0\1\51\1\0\6\4\1\253\15\4\3\0\3\4"+
    "\11\0\1\4\31\0\1\254\36\0\1\4\2\0\1\4"+
    "\4\0\1\51\1\0\12\4\1\255\11\4\3\0\3\4"+
    "\11\0\1\4\5\0\1\51\2\0\1\51\4\0\1\51"+
    "\1\0\12\51\1\256\11\51\3\0\3\51\11\0\1\51"+
    "\21\0\1\257\46\0\1\4\2\0\1\4\4\0\1\51"+
    "\1\0\2\4\1\260\21\4\3\0\3\4\11\0\1\4"+
    "\5\0\1\51\2\0\1\51\4\0\1\51\1\0\2\51"+
    "\1\261\21\51\3\0\3\51\11\0\1\51\5\0\1\4"+
    "\2\0\1\4\4\0\1\51\1\0\2\4\1\262\21\4"+
    "\3\0\3\4\11\0\1\4\21\0\1\263\46\0\1\4"+
    "\2\0\1\4\4\0\1\51\1\0\2\4\1\264\21\4"+
    "\3\0\3\4\11\0\1\4\5\0\1\51\2\0\1\51"+
    "\4\0\1\51\1\0\2\51\1\265\21\51\3\0\3\51"+
    "\11\0\1\51\26\0\1\266\41\0\1\4\2\0\1\4"+
    "\4\0\1\51\1\0\7\4\1\267\14\4\3\0\3\4"+
    "\11\0\1\4\5\0\1\51\2\0\1\51\4\0\1\51"+
    "\1\0\7\51\1\270\14\51\3\0\3\51\11\0\1\51"+
    "\5\0\1\4\2\0\1\4\4\0\1\51\1\0\20\4"+
    "\1\271\3\4\3\0\3\4\11\0\1\4\26\0\1\272"+
    "\41\0\1\4\2\0\1\4\4\0\1\51\1\0\7\4"+
    "\1\273\14\4\3\0\3\4\11\0\1\4\5\0\1\51"+
    "\2\0\1\51\4\0\1\51\1\0\7\51\1\274\14\51"+
    "\3\0\3\51\11\0\1\51\33\0\1\275\34\0\1\4"+
    "\2\0\1\4\4\0\1\51\1\0\14\4\1\276\7\4"+
    "\3\0\3\4\11\0\1\4\5\0\1\51\2\0\1\51"+
    "\4\0\1\51\1\0\14\51\1\277\7\51\3\0\3\51"+
    "\11\0\1\51\27\0\1\300\40\0\1\4\2\0\1\4"+
    "\4\0\1\51\1\0\10\4\1\301\13\4\3\0\3\4"+
    "\11\0\1\4\5\0\1\51\2\0\1\51\4\0\1\51"+
    "\1\0\10\51\1\302\13\51\3\0\3\51\11\0\1\51"+
    "\34\0\1\272\33\0\1\4\2\0\1\4\4\0\1\51"+
    "\1\0\15\4\1\273\6\4\3\0\3\4\11\0\1\4"+
    "\5\0\1\51\2\0\1\51\4\0\1\51\1\0\15\51"+
    "\1\274\6\51\3\0\3\51\11\0\1\51\2\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[8262];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\4\1\1\11\3\1\1\11\16\1\1\11"+
    "\7\1\4\11\1\1\2\11\2\1\1\0\1\11\4\0"+
    "\21\1\1\0\1\1\7\11\15\1\1\0\1\11\13\1"+
    "\1\0\7\1\1\0\2\1\1\0\1\1\1\0\5\1"+
    "\10\0\5\1\10\0\4\1\3\0\1\1\2\0\2\1"+
    "\1\0\3\1\2\0\2\1\1\0\3\1\1\0\2\1"+
    "\1\0\3\1\1\0\2\1\1\0\3\1\1\0\2\1"+
    "\1\0\3\1\1\0\2\1\1\0\2\1\1\11\2\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[194];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  public FirebaseRulesLexer() {
    this((java.io.Reader)null);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  FirebaseRulesLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return com.intellij.psi.TokenType.BAD_CHARACTER;
            } 
            // fall through
          case 41: break;
          case 2: 
            { return com.intellij.psi.TokenType.WHITE_SPACE;
            } 
            // fall through
          case 42: break;
          case 3: 
            { return PATH_NAME;
            } 
            // fall through
          case 43: break;
          case 4: 
            { return COMMENT;
            } 
            // fall through
          case 44: break;
          case 5: 
            { return DOT;
            } 
            // fall through
          case 45: break;
          case 6: 
            { return EQ;
            } 
            // fall through
          case 46: break;
          case 7: 
            { return SLASH;
            } 
            // fall through
          case 47: break;
          case 8: 
            { return LEFT_BRACE;
            } 
            // fall through
          case 48: break;
          case 9: 
            { return RIGHT_BRACE;
            } 
            // fall through
          case 49: break;
          case 10: 
            { return COMMA;
            } 
            // fall through
          case 50: break;
          case 11: 
            { return LT;
            } 
            // fall through
          case 51: break;
          case 12: 
            { return GT;
            } 
            // fall through
          case 52: break;
          case 13: 
            { return LP;
            } 
            // fall through
          case 53: break;
          case 14: 
            { return RP;
            } 
            // fall through
          case 54: break;
          case 15: 
            { return LB;
            } 
            // fall through
          case 55: break;
          case 16: 
            { return RB;
            } 
            // fall through
          case 56: break;
          case 17: 
            { return COLON;
            } 
            // fall through
          case 57: break;
          case 18: 
            { return DOT_COMMA;
            } 
            // fall through
          case 58: break;
          case 19: 
            { return COMPMETA;
            } 
            // fall through
          case 59: break;
          case 20: 
            { return NUMBER;
            } 
            // fall through
          case 60: break;
          case 21: 
            { return STRING;
            } 
            // fall through
          case 61: break;
          case 22: 
            { return EQEQ;
            } 
            // fall through
          case 62: break;
          case 23: 
            { return IF_KEYWORD;
            } 
            // fall through
          case 63: break;
          case 24: 
            { return NE;
            } 
            // fall through
          case 64: break;
          case 25: 
            { return OROR;
            } 
            // fall through
          case 65: break;
          case 26: 
            { return ANDAND;
            } 
            // fall through
          case 66: break;
          case 27: 
            { return LE;
            } 
            // fall through
          case 67: break;
          case 28: 
            { return GE;
            } 
            // fall through
          case 68: break;
          case 29: 
            { return OP;
            } 
            // fall through
          case 69: break;
          case 30: 
            { return VERSIONS;
            } 
            // fall through
          case 70: break;
          case 31: 
            { return PERMISSION;
            } 
            // fall through
          case 71: break;
          case 32: 
            { return PATH_VARIABLE;
            } 
            // fall through
          case 72: break;
          case 33: 
            { return TRUE_KEYWORD;
            } 
            // fall through
          case 73: break;
          case 34: 
            { return NULL_KEYWORD;
            } 
            // fall through
          case 74: break;
          case 35: 
            { return FALSE_KEYWORD;
            } 
            // fall through
          case 75: break;
          case 36: 
            { return ALLOW_KEYWORD;
            } 
            // fall through
          case 76: break;
          case 37: 
            { return MATCH_KEYWORD;
            } 
            // fall through
          case 77: break;
          case 38: 
            { return SERVICE_KEYWORD;
            } 
            // fall through
          case 78: break;
          case 39: 
            { return RULES_VERSION;
            } 
            // fall through
          case 79: break;
          case 40: 
            { return SERVICE_NAME;
            } 
            // fall through
          case 80: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
