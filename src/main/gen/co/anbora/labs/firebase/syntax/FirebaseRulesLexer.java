/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

// Copyright 2000-2020 JetBrains s.r.o. and other contributors. Use of this source code is governed by the Apache 2.0 license that can be found in the LICENSE file.
package co.anbora.labs.firebase.syntax;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import static co.anbora.labs.firebase.syntax.psi.FirebaseRulesTypes.*;
import com.intellij.psi.TokenType;


/**
 * This class is a scanner generated by
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>FirebaseRules.flex</tt>
 */
class FirebaseRulesLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Translates characters to character classes
   * Chosen bits are [9, 6, 6]
   * Total runtime size is 1568 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[ZZ_CMAP_Z[ch>>12]|((ch>>6)&0x3f)]<<6)|(ch&0x3f)];
  }

  /* The ZZ_CMAP_Z table has 272 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\100\1\200\u010d\100");

  /* The ZZ_CMAP_Y table has 192 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\1\2\175\3\1\4\77\3");

  /* The ZZ_CMAP_A table has 320 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\2\1\1\1\7\1\10\1\1\22\0\1\2\1\52\1\11\1\0\1\42\1\0\1\54\1\5\1\43\1"+
    "\44\1\40\1\0\1\63\1\61\1\4\1\12\1\3\2\34\7\3\1\62\1\64\1\55\1\37\1\56\2\0"+
    "\32\35\1\57\1\6\1\60\1\0\1\31\1\0\1\27\1\26\1\13\1\17\1\23\1\20\1\30\1\46"+
    "\1\21\2\35\1\14\1\45\1\33\1\15\1\51\1\35\1\22\1\24\1\25\1\16\1\32\1\47\1\50"+
    "\2\35\1\36\1\53\1\41\7\0\1\7\242\0\2\7\26\0");

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\2\2\1\3\1\4\2\1\1\5\16\6"+
    "\1\7\1\10\1\11\1\1\1\12\1\13\2\6\3\1"+
    "\1\14\1\15\1\16\1\17\1\6\1\20\1\21\1\22"+
    "\1\0\1\3\1\0\1\23\4\0\1\24\10\6\1\25"+
    "\1\26\10\6\1\0\1\27\1\0\2\6\1\30\1\31"+
    "\1\32\1\33\1\34\1\35\1\36\1\24\17\6\1\37"+
    "\1\6\1\0\1\40\1\0\4\6\1\41\7\6\1\42"+
    "\2\6\1\43\1\6\1\44\1\0\1\45\10\6\1\46"+
    "\4\6\1\47\1\0\1\50\1\51\1\0\1\6\1\52"+
    "\1\53\1\54\3\6\1\55\1\56\1\6\1\0\4\6"+
    "\1\57\1\0\1\6\1\60\2\6\1\0\1\6\1\0"+
    "\2\6\1\0\1\6\1\0\2\6\1\0\1\6\1\0"+
    "\2\6\1\0\1\6\1\0\2\6\1\0\1\6\1\0"+
    "\1\6\1\61\1\0\1\6\1\0\1\6\2\62";

  private static int [] zzUnpackAction() {
    int [] result = new int[192];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\65\0\152\0\237\0\324\0\65\0\u0109\0\u013e"+
    "\0\u0173\0\u01a8\0\u01dd\0\u0212\0\u0247\0\u027c\0\u02b1\0\u02e6"+
    "\0\u031b\0\u0350\0\u0385\0\u03ba\0\u03ef\0\u0424\0\u0459\0\u048e"+
    "\0\u04c3\0\65\0\u04f8\0\65\0\65\0\u052d\0\u0562\0\u0597"+
    "\0\u05cc\0\u0601\0\u0636\0\u066b\0\65\0\65\0\u06a0\0\65"+
    "\0\65\0\65\0\u0173\0\u06d5\0\u070a\0\65\0\u073f\0\u0774"+
    "\0\u013e\0\u07a9\0\u07de\0\u0813\0\u0848\0\u087d\0\u08b2\0\u08e7"+
    "\0\u091c\0\u0951\0\u0986\0\u0212\0\u0212\0\u09bb\0\u09f0\0\u0a25"+
    "\0\u0a5a\0\u0a8f\0\u0ac4\0\u0af9\0\u0b2e\0\u0b63\0\65\0\u0b98"+
    "\0\u0bcd\0\u0c02\0\65\0\65\0\65\0\65\0\65\0\65"+
    "\0\65\0\u0c37\0\u0c6c\0\u0ca1\0\u0cd6\0\u0d0b\0\u0d40\0\u0d75"+
    "\0\u0daa\0\u0ddf\0\u0e14\0\u0e49\0\u0e7e\0\u0eb3\0\u0ee8\0\u0f1d"+
    "\0\u0f52\0\u0212\0\u0f87\0\u0fbc\0\65\0\u0ff1\0\u1026\0\u105b"+
    "\0\u1090\0\u10c5\0\u0212\0\u10fa\0\u112f\0\u1164\0\u1199\0\u11ce"+
    "\0\u1203\0\u1238\0\u0212\0\u126d\0\u12a2\0\u0212\0\u12d7\0\u0212"+
    "\0\u130c\0\65\0\u1341\0\u1376\0\u13ab\0\u13e0\0\u1415\0\u144a"+
    "\0\u147f\0\u14b4\0\u0212\0\u14e9\0\u151e\0\u1553\0\u1588\0\u0212"+
    "\0\u15bd\0\u0212\0\u0212\0\u15f2\0\u1627\0\u0212\0\u0212\0\u0212"+
    "\0\u165c\0\u1691\0\u16c6\0\u0212\0\u0212\0\u16fb\0\u1730\0\u1765"+
    "\0\u179a\0\u17cf\0\u1804\0\u0212\0\u1839\0\u186e\0\u0212\0\u18a3"+
    "\0\u18d8\0\u190d\0\u1942\0\u1977\0\u19ac\0\u19e1\0\u1a16\0\u1a4b"+
    "\0\u1a80\0\u1ab5\0\u1aea\0\u1b1f\0\u1b54\0\u1b89\0\u1bbe\0\u1bf3"+
    "\0\u1c28\0\u1c5d\0\u1c92\0\u1cc7\0\u1cfc\0\u1d31\0\u1d66\0\u1d9b"+
    "\0\u1dd0\0\u0212\0\u1e05\0\u1e3a\0\u1e6f\0\u1ea4\0\65\0\u0212";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[192];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\2\2\1\4"+
    "\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\1\22\1\23\1\24\1\14\1\25\1\26"+
    "\2\14\1\27\1\5\1\14\1\30\1\31\1\2\1\32"+
    "\1\33\1\34\1\35\1\36\1\14\1\37\2\14\1\40"+
    "\1\41\1\42\1\43\1\44\1\45\1\46\1\47\1\50"+
    "\1\51\1\52\66\0\1\3\1\4\5\0\1\4\1\0"+
    "\1\53\53\0\2\4\5\0\1\4\57\0\1\5\1\54"+
    "\6\0\21\14\1\5\1\14\7\0\5\14\7\0\1\14"+
    "\3\0\5\55\1\56\1\57\25\55\1\60\30\55\6\61"+
    "\1\62\2\61\1\56\53\61\12\0\1\63\55\0\1\14"+
    "\7\0\1\14\1\64\5\14\1\65\13\14\7\0\5\14"+
    "\7\0\1\14\6\0\1\14\7\0\6\14\1\66\14\14"+
    "\7\0\5\14\7\0\1\14\6\0\1\14\7\0\23\14"+
    "\7\0\5\14\7\0\1\14\6\0\1\14\7\0\23\14"+
    "\7\0\4\14\1\67\7\0\1\14\6\0\1\14\7\0"+
    "\10\14\1\70\12\14\7\0\5\14\7\0\1\14\6\0"+
    "\1\14\7\0\3\14\1\71\2\14\1\72\5\14\1\73"+
    "\6\14\7\0\5\14\7\0\1\14\6\0\1\14\7\0"+
    "\5\14\1\74\12\14\1\75\2\14\7\0\5\14\7\0"+
    "\1\14\6\0\1\14\7\0\3\14\1\76\4\14\1\77"+
    "\12\14\7\0\5\14\7\0\1\14\6\0\1\14\7\0"+
    "\23\14\7\0\3\14\1\100\1\14\7\0\1\14\6\0"+
    "\1\14\7\0\10\14\1\101\12\14\7\0\5\14\7\0"+
    "\1\14\6\0\1\14\7\0\7\14\1\102\13\14\7\0"+
    "\5\14\7\0\1\14\6\0\1\14\7\0\1\14\1\103"+
    "\21\14\7\0\5\14\7\0\1\14\6\0\1\14\7\0"+
    "\10\14\1\104\12\14\7\0\5\14\7\0\1\14\6\0"+
    "\1\14\7\0\3\14\1\105\17\14\7\0\5\14\7\0"+
    "\1\14\6\0\1\106\7\0\23\106\7\0\5\106\7\0"+
    "\1\106\42\0\1\107\70\0\1\110\24\0\1\14\7\0"+
    "\14\14\1\111\6\14\7\0\5\14\7\0\1\14\6\0"+
    "\1\14\7\0\7\14\1\112\13\14\7\0\5\14\7\0"+
    "\1\14\42\0\1\113\100\0\1\114\65\0\1\115\47\0"+
    "\1\116\64\0\1\117\30\0\1\14\7\0\23\14\7\0"+
    "\5\14\4\0\1\120\2\0\1\14\6\0\1\54\30\0"+
    "\1\54\30\0\5\55\1\56\1\57\57\55\1\0\5\55"+
    "\2\0\61\55\1\121\1\57\56\55\1\61\1\0\5\61"+
    "\2\0\54\61\1\63\1\122\63\63\3\0\1\14\7\0"+
    "\2\14\1\123\20\14\7\0\5\14\7\0\1\14\6\0"+
    "\1\14\7\0\10\14\1\124\12\14\7\0\5\14\7\0"+
    "\1\14\6\0\1\14\7\0\11\14\1\125\11\14\7\0"+
    "\5\14\7\0\1\14\6\0\1\14\7\0\4\14\1\126"+
    "\16\14\7\0\5\14\7\0\1\14\6\0\1\14\7\0"+
    "\1\14\1\127\21\14\7\0\5\14\7\0\1\14\6\0"+
    "\1\14\7\0\20\14\1\130\2\14\7\0\5\14\7\0"+
    "\1\14\6\0\1\14\7\0\7\14\1\131\13\14\7\0"+
    "\5\14\7\0\1\14\6\0\1\14\7\0\1\14\1\132"+
    "\21\14\7\0\5\14\7\0\1\14\6\0\1\14\7\0"+
    "\1\14\1\133\21\14\7\0\5\14\7\0\1\14\6\0"+
    "\1\14\7\0\12\14\1\134\1\14\1\135\6\14\7\0"+
    "\5\14\7\0\1\14\6\0\1\14\7\0\6\14\1\136"+
    "\14\14\7\0\5\14\7\0\1\14\6\0\1\14\7\0"+
    "\7\14\1\137\13\14\7\0\5\14\7\0\1\14\6\0"+
    "\1\14\7\0\3\14\1\140\17\14\7\0\5\14\7\0"+
    "\1\14\6\0\1\14\7\0\1\14\1\141\21\14\7\0"+
    "\5\14\7\0\1\14\6\0\1\14\7\0\12\14\1\142"+
    "\10\14\7\0\5\14\7\0\1\14\6\0\1\14\7\0"+
    "\1\14\1\143\21\14\7\0\5\14\7\0\1\14\6\0"+
    "\1\106\7\0\23\106\1\0\1\144\1\0\1\145\3\0"+
    "\5\106\7\0\1\106\6\0\1\146\7\0\23\146\7\0"+
    "\5\146\7\0\1\146\6\0\1\14\7\0\12\14\1\147"+
    "\10\14\7\0\5\14\7\0\1\14\6\0\1\14\7\0"+
    "\6\14\1\150\14\14\7\0\5\14\7\0\1\14\4\0"+
    "\1\122\10\0\1\53\55\0\1\14\7\0\3\14\1\151"+
    "\17\14\7\0\5\14\7\0\1\14\6\0\1\14\7\0"+
    "\14\14\1\152\6\14\7\0\5\14\7\0\1\14\6\0"+
    "\1\14\7\0\12\14\1\153\10\14\7\0\5\14\7\0"+
    "\1\14\6\0\1\14\7\0\14\14\1\154\6\14\7\0"+
    "\5\14\7\0\1\14\6\0\1\14\7\0\10\14\1\155"+
    "\12\14\7\0\5\14\7\0\1\14\6\0\1\14\7\0"+
    "\1\156\22\14\7\0\5\14\7\0\1\14\6\0\1\14"+
    "\7\0\10\14\1\157\12\14\7\0\5\14\7\0\1\14"+
    "\6\0\1\14\7\0\11\14\1\160\11\14\7\0\5\14"+
    "\7\0\1\14\6\0\1\14\7\0\10\14\1\161\12\14"+
    "\7\0\5\14\7\0\1\14\6\0\1\14\7\0\3\14"+
    "\1\162\17\14\7\0\5\14\7\0\1\14\6\0\1\14"+
    "\7\0\4\14\1\163\16\14\7\0\5\14\7\0\1\14"+
    "\6\0\1\14\7\0\11\14\1\164\11\14\7\0\5\14"+
    "\7\0\1\14\6\0\1\14\7\0\17\14\1\165\3\14"+
    "\7\0\5\14\7\0\1\14\6\0\1\14\7\0\10\14"+
    "\1\166\12\14\7\0\5\14\7\0\1\14\6\0\1\14"+
    "\7\0\2\14\1\167\20\14\7\0\5\14\7\0\1\14"+
    "\6\0\1\14\7\0\1\14\1\170\21\14\7\0\5\14"+
    "\7\0\1\14\43\0\1\171\27\0\2\146\6\0\23\146"+
    "\6\0\1\172\5\146\7\0\1\146\6\0\1\14\7\0"+
    "\1\173\22\14\7\0\5\14\7\0\1\14\6\0\1\14"+
    "\7\0\12\14\1\174\10\14\7\0\5\14\7\0\1\14"+
    "\6\0\1\14\7\0\4\14\1\175\16\14\7\0\5\14"+
    "\7\0\1\14\6\0\1\14\7\0\12\14\1\176\10\14"+
    "\7\0\5\14\7\0\1\14\6\0\1\14\7\0\12\14"+
    "\1\177\10\14\7\0\5\14\7\0\1\14\6\0\1\14"+
    "\7\0\12\14\1\200\10\14\7\0\5\14\7\0\1\14"+
    "\6\0\1\14\7\0\12\14\1\201\10\14\7\0\5\14"+
    "\7\0\1\14\6\0\1\14\7\0\13\14\1\202\7\14"+
    "\7\0\5\14\7\0\1\14\6\0\1\14\7\0\10\14"+
    "\1\203\12\14\7\0\5\14\7\0\1\14\6\0\1\14"+
    "\7\0\11\14\1\204\11\14\7\0\5\14\7\0\1\14"+
    "\6\0\1\14\7\0\7\14\1\205\13\14\7\0\5\14"+
    "\7\0\1\14\6\0\1\14\7\0\12\14\1\206\10\14"+
    "\7\0\5\14\7\0\1\14\6\0\1\14\7\0\6\14"+
    "\1\207\14\14\7\0\5\14\7\0\1\14\6\0\1\14"+
    "\7\0\23\14\7\0\2\14\1\210\2\14\7\0\1\14"+
    "\43\0\1\211\27\0\1\14\7\0\23\14\7\0\1\14"+
    "\1\212\3\14\7\0\1\14\6\0\1\14\7\0\10\14"+
    "\1\213\12\14\7\0\5\14\7\0\1\14\3\0\1\214"+
    "\1\0\1\214\1\215\3\214\2\0\2\214\23\215\7\214"+
    "\5\215\7\214\1\215\3\214\3\0\1\14\7\0\10\14"+
    "\1\216\12\14\7\0\5\14\7\0\1\14\6\0\1\14"+
    "\7\0\10\14\1\217\12\14\7\0\5\14\7\0\1\14"+
    "\6\0\1\14\7\0\10\14\1\220\12\14\7\0\5\14"+
    "\7\0\1\14\6\0\1\14\7\0\6\14\1\221\14\14"+
    "\7\0\5\14\7\0\1\14\6\0\1\14\7\0\14\14"+
    "\1\222\6\14\7\0\5\14\7\0\1\14\6\0\1\14"+
    "\7\0\16\14\1\223\4\14\7\0\5\14\7\0\1\14"+
    "\6\0\1\14\7\0\20\14\1\224\2\14\7\0\5\14"+
    "\7\0\1\14\6\0\1\14\7\0\11\14\1\225\11\14"+
    "\7\0\5\14\7\0\1\14\6\0\1\14\7\0\1\226"+
    "\22\14\7\0\5\14\7\0\1\14\44\0\1\145\43\0"+
    "\1\227\47\0\1\14\7\0\5\14\1\230\15\14\7\0"+
    "\5\14\7\0\1\14\6\0\1\14\7\0\2\14\1\231"+
    "\20\14\7\0\5\14\7\0\1\14\6\0\1\14\7\0"+
    "\11\14\1\232\11\14\7\0\5\14\7\0\1\14\6\0"+
    "\1\14\7\0\17\14\1\233\3\14\7\0\5\14\7\0"+
    "\1\14\6\0\1\14\7\0\10\14\1\234\12\14\7\0"+
    "\5\14\7\0\1\14\24\0\1\235\46\0\1\14\7\0"+
    "\6\14\1\236\14\14\7\0\5\14\7\0\1\14\6\0"+
    "\1\14\7\0\20\14\1\237\2\14\7\0\5\14\7\0"+
    "\1\14\6\0\1\14\7\0\10\14\1\240\12\14\7\0"+
    "\5\14\7\0\1\14\6\0\1\14\7\0\10\14\1\241"+
    "\12\14\7\0\5\14\7\0\1\14\25\0\1\242\45\0"+
    "\1\14\7\0\7\14\1\243\13\14\7\0\5\14\7\0"+
    "\1\14\3\0\1\244\1\0\1\244\1\245\3\244\2\0"+
    "\2\244\23\245\7\244\5\245\7\244\1\245\3\244\3\0"+
    "\1\14\7\0\7\14\1\246\13\14\7\0\5\14\7\0"+
    "\1\14\26\0\1\247\44\0\1\14\7\0\10\14\1\250"+
    "\12\14\7\0\5\14\7\0\1\14\27\0\1\251\43\0"+
    "\1\14\7\0\11\14\1\252\11\14\7\0\5\14\7\0"+
    "\1\14\6\0\1\14\7\0\11\14\1\253\11\14\7\0"+
    "\5\14\7\0\1\14\27\0\1\254\43\0\1\14\7\0"+
    "\11\14\1\255\11\14\7\0\5\14\7\0\1\14\30\0"+
    "\1\256\42\0\1\14\7\0\12\14\1\257\10\14\7\0"+
    "\5\14\7\0\1\14\6\0\1\14\7\0\6\14\1\260"+
    "\14\14\7\0\5\14\7\0\1\14\30\0\1\261\42\0"+
    "\1\14\7\0\12\14\1\262\10\14\7\0\5\14\7\0"+
    "\1\14\20\0\1\263\52\0\1\14\7\0\2\14\1\264"+
    "\20\14\7\0\5\14\7\0\1\14\6\0\1\14\7\0"+
    "\2\14\1\265\20\14\7\0\5\14\7\0\1\14\20\0"+
    "\1\266\52\0\1\14\7\0\2\14\1\267\20\14\7\0"+
    "\5\14\7\0\1\14\25\0\1\270\45\0\1\14\7\0"+
    "\7\14\1\271\13\14\7\0\5\14\7\0\1\14\6\0"+
    "\1\14\7\0\20\14\1\272\2\14\7\0\5\14\7\0"+
    "\1\14\25\0\1\273\45\0\1\14\7\0\7\14\1\274"+
    "\13\14\7\0\5\14\7\0\1\14\32\0\1\275\40\0"+
    "\1\14\7\0\14\14\1\276\6\14\7\0\5\14\7\0"+
    "\1\14\26\0\1\277\44\0\1\14\7\0\10\14\1\300"+
    "\12\14\7\0\5\14\7\0\1\14\33\0\1\273\37\0"+
    "\1\14\7\0\15\14\1\274\5\14\7\0\5\14\7\0"+
    "\1\14\3\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[7897];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\3\1\1\11\23\1\1\11\1\1\2\11"+
    "\7\1\2\11\1\1\3\11\1\0\1\1\1\0\1\11"+
    "\4\0\23\1\1\0\1\11\1\0\2\1\7\11\22\1"+
    "\1\0\1\11\1\0\22\1\1\0\1\11\16\1\1\0"+
    "\2\1\1\0\12\1\1\0\5\1\1\0\4\1\1\0"+
    "\1\1\1\0\2\1\1\0\1\1\1\0\2\1\1\0"+
    "\1\1\1\0\2\1\1\0\1\1\1\0\2\1\1\0"+
    "\1\1\1\0\2\1\1\0\1\1\1\0\1\1\1\11"+
    "\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[192];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  public FirebaseRulesLexer() {
    this((java.io.Reader)null);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  FirebaseRulesLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /**
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return com.intellij.psi.TokenType.BAD_CHARACTER;
            }
            // fall through
          case 51: break;
          case 2:
            { return com.intellij.psi.TokenType.WHITE_SPACE;
            }
            // fall through
          case 52: break;
          case 3:
            { return NUMBER;
            }
            // fall through
          case 53: break;
          case 4:
            { return DOT;
            }
            // fall through
          case 54: break;
          case 5:
            { return SLASH;
            }
            // fall through
          case 55: break;
          case 6:
            { return IDENTIFIER;
            }
            // fall through
          case 56: break;
          case 7:
            { return LEFT_BRACE;
            }
            // fall through
          case 57: break;
          case 8:
            { return EQ;
            }
            // fall through
          case 58: break;
          case 9:
            { return RIGHT_BRACE;
            }
            // fall through
          case 59: break;
          case 10:
            { return LP;
            }
            // fall through
          case 60: break;
          case 11:
            { return RP;
            }
            // fall through
          case 61: break;
          case 12:
            { return LT;
            }
            // fall through
          case 62: break;
          case 13:
            { return GT;
            }
            // fall through
          case 63: break;
          case 14:
            { return LB;
            }
            // fall through
          case 64: break;
          case 15:
            { return RB;
            }
            // fall through
          case 65: break;
          case 16:
            { return COLON;
            }
            // fall through
          case 66: break;
          case 17:
            { return COMMA;
            }
            // fall through
          case 67: break;
          case 18:
            { return DOT_COMMA;
            }
            // fall through
          case 68: break;
          case 19:
            { return STRING;
            }
            // fall through
          case 69: break;
          case 20:
            { return LINE_COMMENT;
            }
            // fall through
          case 70: break;
          case 21:
            { return IF_KEYWORD;
            }
            // fall through
          case 71: break;
          case 22:
            { return IN_KEYWORD;
            }
            // fall through
          case 72: break;
          case 23:
            { return EQEQ;
            }
            // fall through
          case 73: break;
          case 24:
            { return NE;
            }
            // fall through
          case 74: break;
          case 25:
            { return OROR;
            }
            // fall through
          case 75: break;
          case 26:
            { return ANDAND;
            }
            // fall through
          case 76: break;
          case 27:
            { return LE;
            }
            // fall through
          case 77: break;
          case 28:
            { return GE;
            }
            // fall through
          case 78: break;
          case 29:
            { return OP;
            }
            // fall through
          case 79: break;
          case 30:
            { return VERSIONS;
            }
            // fall through
          case 80: break;
          case 31:
            { return GET_KEYWORD;
            }
            // fall through
          case 81: break;
          case 32:
            { return PATH_VARIABLE;
            }
            // fall through
          case 82: break;
          case 33:
            { return LIST_KEYWORD;
            }
            // fall through
          case 83: break;
          case 34:
            { return READ_KEYWORD;
            }
            // fall through
          case 84: break;
          case 35:
            { return TRUE_KEYWORD;
            }
            // fall through
          case 85: break;
          case 36:
            { return NULL_KEYWORD;
            }
            // fall through
          case 86: break;
          case 37:
            { return PATH_BUILT_IN;
            }
            // fall through
          case 87: break;
          case 38:
            { return FALSE_KEYWORD;
            }
            // fall through
          case 88: break;
          case 39:
            { return ALLOW_KEYWORD;
            }
            // fall through
          case 89: break;
          case 40:
            { return MATCH_KEYWORD;
            }
            // fall through
          case 90: break;
          case 41:
            { return WRITE_KEYWORD;
            }
            // fall through
          case 91: break;
          case 42:
            { return CREATE_KEYWORD;
            }
            // fall through
          case 92: break;
          case 43:
            { return UPDATE_KEYWORD;
            }
            // fall through
          case 93: break;
          case 44:
            { return DELETE_KEYWORD;
            }
            // fall through
          case 94: break;
          case 45:
            { return RETURN_KEYWORD;
            }
            // fall through
          case 95: break;
          case 46:
            { return EXITS_KEYWORD;
            }
            // fall through
          case 96: break;
          case 47:
            { return SERVICE_KEYWORD;
            }
            // fall through
          case 97: break;
          case 48:
            { return FUNCTION_KEYWORD;
            }
            // fall through
          case 98: break;
          case 49:
            { return RULES_VERSION;
            }
            // fall through
          case 99: break;
          case 50:
            { return SERVICE_NAME;
            }
            // fall through
          case 100: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
