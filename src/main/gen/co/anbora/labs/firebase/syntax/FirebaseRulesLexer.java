/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

// Copyright 2000-2020 JetBrains s.r.o. and other contributors. Use of this source code is governed by the Apache 2.0 license that can be found in the LICENSE file.
package co.anbora.labs.firebase.syntax;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import static co.anbora.labs.firebase.syntax.psi.FirebaseRulesTypes.*;
import com.intellij.psi.TokenType;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>FirebaseRules.flex</tt>
 */
class FirebaseRulesLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [9, 6, 6]
   * Total runtime size is 1568 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[ZZ_CMAP_Z[ch>>12]|((ch>>6)&0x3f)]<<6)|(ch&0x3f)];
  }

  /* The ZZ_CMAP_Z table has 272 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\100\1\200\u010d\100");

  /* The ZZ_CMAP_Y table has 192 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\1\2\175\3\1\4\77\3");

  /* The ZZ_CMAP_A table has 320 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\2\4\1\22\0\1\2\1\0\1\12\1\4\3\0\1\10\1\47\1\50\1\44\1\0\1\46\1\53"+
    "\1\7\1\14\1\6\2\41\7\6\1\55\1\56\1\0\1\13\1\54\2\0\32\3\1\51\1\11\1\52\1\0"+
    "\1\37\1\0\1\32\1\31\1\22\1\26\1\16\1\27\1\33\1\35\1\21\2\3\1\23\1\34\1\40"+
    "\1\24\1\42\1\3\1\17\1\15\1\30\1\25\1\20\1\36\3\3\1\43\1\0\1\45\7\0\1\5\242"+
    "\0\2\5\26\0");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\3\1\5\2\1"+
    "\1\6\1\7\13\3\1\10\1\11\1\12\1\13\1\14"+
    "\1\15\1\16\1\3\1\17\1\20\1\21\1\22\1\0"+
    "\1\23\4\0\15\3\1\0\1\24\1\25\10\3\1\26"+
    "\2\3\1\0\1\27\10\3\1\0\4\3\1\30\1\0"+
    "\2\3\1\31\1\0\2\3\1\0\1\3\1\21\1\3"+
    "\7\0\1\32\1\3\1\0\1\3\1\21\1\3\7\0"+
    "\1\3\1\0\1\3\1\21\1\3\3\0\1\26\1\0"+
    "\1\3\1\0\1\3\1\21\1\0\1\3\1\21\1\0"+
    "\1\3\1\0\1\3\1\21\1\0\1\3\1\21\1\3"+
    "\1\0\1\3\1\21\1\0\1\3\1\21\1\3\1\0"+
    "\1\3\1\21\1\0\1\3\1\21\1\33\1\0\1\3"+
    "\1\21\1\0\1\3\1\21\1\0\1\3\1\21\1\0"+
    "\1\3\1\21\3\34";

  private static int [] zzUnpackAction() {
    int [] result = new int[169];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\57\0\136\0\215\0\274\0\353\0\57\0\u011a"+
    "\0\u0149\0\u0178\0\57\0\u01a7\0\u01d6\0\u0205\0\u0234\0\u0263"+
    "\0\u0292\0\u02c1\0\u02f0\0\u031f\0\u034e\0\u037d\0\u03ac\0\57"+
    "\0\215\0\57\0\57\0\57\0\57\0\u03db\0\57\0\57"+
    "\0\u0178\0\u040a\0\u0439\0\57\0\u0468\0\u0497\0\u0149\0\u04c6"+
    "\0\u04f5\0\u0524\0\u0553\0\u0582\0\u05b1\0\u05e0\0\u060f\0\u063e"+
    "\0\u066d\0\u069c\0\u06cb\0\u06fa\0\u0729\0\u0758\0\57\0\57"+
    "\0\u0787\0\u07b6\0\u07e5\0\u0814\0\u0843\0\u0872\0\u08a1\0\u08d0"+
    "\0\u08ff\0\u092e\0\u095d\0\u098c\0\57\0\u09bb\0\u09ea\0\u0a19"+
    "\0\u0a48\0\u0a77\0\u0aa6\0\u0ad5\0\u0b04\0\u0b33\0\u0b62\0\u0b91"+
    "\0\u0bc0\0\u0bef\0\215\0\u0c1e\0\u0c4d\0\u0c7c\0\215\0\u0cab"+
    "\0\u0cda\0\u0d09\0\u0d38\0\u0d67\0\u0d96\0\u0dc5\0\u0df4\0\u0e23"+
    "\0\u0e52\0\u0e81\0\u0eb0\0\u0edf\0\u0f0e\0\215\0\u0f3d\0\u0f6c"+
    "\0\u0f9b\0\u0fca\0\u0ff9\0\u1028\0\u1057\0\u1086\0\u10b5\0\u10e4"+
    "\0\u1113\0\u1142\0\u1171\0\u11a0\0\u11cf\0\u11fe\0\u122d\0\u125c"+
    "\0\u128b\0\u12ba\0\u12e9\0\u1318\0\u1347\0\u1376\0\u13a5\0\u13d4"+
    "\0\u1403\0\u1432\0\u1461\0\u1490\0\u14bf\0\u14ee\0\u151d\0\u154c"+
    "\0\u157b\0\u15aa\0\u15d9\0\u1608\0\u1637\0\u1666\0\u1695\0\u16c4"+
    "\0\u16f3\0\u1722\0\u1751\0\u1780\0\u17af\0\u17de\0\u180d\0\u183c"+
    "\0\u186b\0\215\0\u189a\0\u18c9\0\u18f8\0\u1927\0\u1956\0\u1985"+
    "\0\u19b4\0\u19e3\0\u1a12\0\u1a41\0\u1a70\0\u1a9f\0\57\0\215"+
    "\0\u0178";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[169];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\4\1\5\1\2\1\6\1\7\1\10"+
    "\1\2\1\11\1\12\1\13\1\14\1\4\1\15\2\4"+
    "\1\16\1\17\1\4\1\20\1\21\1\22\2\4\1\23"+
    "\1\24\1\25\1\4\1\26\2\4\1\6\1\4\1\27"+
    "\1\2\1\30\1\31\1\32\1\33\1\34\1\35\1\36"+
    "\1\2\1\37\1\40\60\0\2\3\57\0\1\4\2\0"+
    "\1\4\4\0\1\41\1\0\26\4\3\0\1\4\4\0"+
    "\1\4\3\0\1\5\1\0\3\5\1\0\51\5\3\0"+
    "\1\4\2\0\1\6\1\42\3\0\1\41\1\0\24\4"+
    "\1\6\1\4\3\0\1\4\4\0\1\4\3\0\10\43"+
    "\1\44\1\45\27\43\1\46\15\43\11\47\1\50\1\44"+
    "\44\47\3\0\1\41\2\0\1\41\4\0\1\41\1\0"+
    "\26\41\3\0\1\41\4\0\1\41\6\0\1\4\2\0"+
    "\1\4\4\0\1\41\1\0\1\4\1\51\24\4\3\0"+
    "\1\4\4\0\1\4\6\0\1\4\2\0\1\4\4\0"+
    "\1\41\1\0\1\4\1\52\6\4\1\53\15\4\3\0"+
    "\1\4\4\0\1\4\6\0\1\4\2\0\1\4\4\0"+
    "\1\41\1\0\2\4\1\54\3\4\1\55\17\4\3\0"+
    "\1\4\4\0\1\4\6\0\1\4\2\0\1\4\4\0"+
    "\1\41\1\0\4\4\1\56\21\4\3\0\1\4\4\0"+
    "\1\4\6\0\1\4\2\0\1\4\4\0\1\41\1\0"+
    "\25\4\1\57\3\0\1\4\4\0\1\4\6\0\1\4"+
    "\2\0\1\4\4\0\1\41\1\0\1\4\1\60\24\4"+
    "\3\0\1\4\4\0\1\4\6\0\1\4\2\0\1\4"+
    "\4\0\1\41\1\0\4\4\1\61\21\4\3\0\1\4"+
    "\4\0\1\4\6\0\1\4\2\0\1\4\4\0\1\41"+
    "\1\0\6\4\1\62\17\4\3\0\1\4\4\0\1\4"+
    "\6\0\1\4\2\0\1\4\4\0\1\41\1\0\1\4"+
    "\1\63\24\4\3\0\1\4\4\0\1\4\6\0\1\4"+
    "\2\0\1\4\4\0\1\41\1\0\15\4\1\64\10\4"+
    "\3\0\1\4\4\0\1\4\6\0\1\4\2\0\1\4"+
    "\4\0\1\41\1\0\2\4\1\65\23\4\3\0\1\4"+
    "\4\0\1\4\6\0\1\66\2\0\1\66\6\0\26\66"+
    "\3\0\1\66\4\0\1\66\6\0\1\4\2\0\1\4"+
    "\4\0\1\41\1\0\26\4\3\0\1\4\4\0\1\4"+
    "\1\67\10\0\1\42\32\0\1\42\15\0\10\43\1\44"+
    "\1\45\46\43\1\0\3\43\1\0\61\43\1\70\1\45"+
    "\45\43\1\47\1\0\3\47\1\0\51\47\3\0\1\4"+
    "\2\0\1\4\4\0\1\41\1\0\2\4\1\71\23\4"+
    "\3\0\1\4\4\0\1\4\6\0\1\4\2\0\1\4"+
    "\4\0\1\41\1\0\15\4\1\72\10\4\3\0\1\4"+
    "\4\0\1\4\6\0\1\4\2\0\1\4\4\0\1\41"+
    "\1\0\6\4\1\73\17\4\3\0\1\4\4\0\1\4"+
    "\6\0\1\4\2\0\1\4\4\0\1\41\1\0\1\4"+
    "\1\74\24\4\3\0\1\4\4\0\1\4\6\0\1\4"+
    "\2\0\1\4\4\0\1\41\1\0\7\4\1\75\16\4"+
    "\3\0\1\4\4\0\1\4\6\0\1\4\2\0\1\4"+
    "\4\0\1\41\1\0\1\63\25\4\3\0\1\4\4\0"+
    "\1\4\6\0\1\4\2\0\1\4\4\0\1\41\1\0"+
    "\11\4\1\74\14\4\3\0\1\4\4\0\1\4\6\0"+
    "\1\4\2\0\1\4\4\0\1\41\1\0\6\4\1\76"+
    "\17\4\3\0\1\4\4\0\1\4\6\0\1\4\2\0"+
    "\1\4\4\0\1\41\1\0\2\4\1\77\23\4\3\0"+
    "\1\4\4\0\1\4\6\0\1\4\2\0\1\4\4\0"+
    "\1\41\1\0\6\4\1\100\17\4\3\0\1\4\4\0"+
    "\1\4\6\0\1\4\2\0\1\4\4\0\1\41\1\0"+
    "\13\4\1\101\12\4\3\0\1\4\4\0\1\4\6\0"+
    "\1\4\2\0\1\4\4\0\1\41\1\0\13\4\1\102"+
    "\12\4\3\0\1\4\4\0\1\4\6\0\1\4\2\0"+
    "\1\4\4\0\1\41\1\0\4\4\1\103\21\4\3\0"+
    "\1\4\4\0\1\4\6\0\1\66\2\0\1\66\4\0"+
    "\1\104\1\0\26\66\2\0\1\105\1\66\4\0\1\66"+
    "\6\0\1\4\2\0\1\4\4\0\1\41\1\0\3\4"+
    "\1\106\22\4\3\0\1\4\4\0\1\4\6\0\1\4"+
    "\2\0\1\4\4\0\1\41\1\0\11\4\1\101\14\4"+
    "\3\0\1\4\4\0\1\4\6\0\1\4\2\0\1\4"+
    "\4\0\1\41\1\0\1\4\1\107\24\4\3\0\1\4"+
    "\4\0\1\4\6\0\1\4\2\0\1\4\4\0\1\41"+
    "\1\0\15\4\1\103\10\4\3\0\1\4\4\0\1\4"+
    "\6\0\1\4\2\0\1\4\4\0\1\41\1\0\10\4"+
    "\1\110\15\4\3\0\1\4\4\0\1\4\6\0\1\4"+
    "\2\0\1\4\4\0\1\41\1\0\1\4\1\103\24\4"+
    "\3\0\1\4\4\0\1\4\6\0\1\4\2\0\1\4"+
    "\4\0\1\41\1\0\1\4\1\111\24\4\3\0\1\4"+
    "\4\0\1\4\6\0\1\4\2\0\1\4\4\0\1\41"+
    "\1\0\7\4\1\112\16\4\3\0\1\4\4\0\1\4"+
    "\6\0\1\4\2\0\1\4\4\0\1\41\1\0\26\4"+
    "\3\0\1\113\4\0\1\4\6\0\1\4\2\0\1\4"+
    "\4\0\1\41\1\0\5\4\1\114\20\4\3\0\1\4"+
    "\4\0\1\4\6\0\1\4\2\0\1\4\4\0\1\41"+
    "\1\0\13\4\1\115\12\4\3\0\1\4\4\0\1\4"+
    "\47\0\1\116\15\0\1\4\2\0\1\4\4\0\1\41"+
    "\1\0\4\4\1\117\21\4\3\0\1\4\4\0\1\4"+
    "\6\0\1\4\2\0\1\4\4\0\1\41\1\0\1\120"+
    "\25\4\3\0\1\4\4\0\1\4\6\0\1\4\2\0"+
    "\1\4\4\0\1\41\1\0\11\4\1\121\14\4\3\0"+
    "\1\4\4\0\1\4\6\0\1\4\2\0\1\4\4\0"+
    "\1\41\1\0\14\4\1\122\11\4\3\0\1\4\4\0"+
    "\1\4\6\0\1\4\2\0\1\4\4\0\1\41\1\0"+
    "\21\4\1\123\4\4\3\0\1\4\4\0\1\4\4\0"+
    "\2\124\1\4\2\0\1\4\4\0\1\41\1\0\2\4"+
    "\1\125\2\4\1\126\1\17\1\4\1\20\1\21\4\4"+
    "\1\24\2\4\1\26\4\4\3\0\1\4\4\0\1\4"+
    "\6\0\1\4\2\0\1\4\4\0\1\41\1\0\20\4"+
    "\1\127\5\4\3\0\1\4\4\0\1\4\6\0\1\4"+
    "\2\0\1\4\4\0\1\41\1\0\1\4\1\101\24\4"+
    "\3\0\1\4\4\0\1\4\47\0\1\130\15\0\1\4"+
    "\2\0\1\4\4\0\1\41\1\0\5\4\1\131\20\4"+
    "\3\0\1\4\4\0\1\4\6\0\1\4\2\0\1\4"+
    "\4\0\1\41\1\0\22\4\1\132\3\4\3\0\1\4"+
    "\4\0\1\4\3\0\1\133\1\0\1\133\1\134\1\133"+
    "\1\0\1\134\4\133\1\135\1\133\26\134\3\133\1\134"+
    "\4\133\1\134\3\133\3\0\1\4\2\0\1\4\4\0"+
    "\1\41\1\0\15\4\1\136\10\4\3\0\1\4\4\0"+
    "\1\4\4\0\2\124\14\0\1\137\2\0\1\140\1\141"+
    "\1\0\1\142\1\143\4\0\1\144\2\0\1\145\23\0"+
    "\1\4\2\0\1\4\4\0\1\41\1\0\1\4\1\52"+
    "\24\4\3\0\1\4\4\0\1\4\6\0\1\4\2\0"+
    "\1\4\4\0\1\41\1\0\2\4\1\54\23\4\3\0"+
    "\1\4\4\0\1\4\50\0\1\105\14\0\1\4\2\0"+
    "\1\4\4\0\1\41\1\0\1\4\1\146\24\4\3\0"+
    "\1\4\4\0\1\4\6\0\1\4\2\0\1\4\4\0"+
    "\1\41\1\0\3\4\1\147\22\4\3\0\1\4\4\0"+
    "\1\4\32\0\1\150\32\0\1\4\2\0\1\4\4\0"+
    "\1\41\1\0\12\4\1\151\13\4\3\0\1\4\4\0"+
    "\1\4\6\0\1\41\2\0\1\41\4\0\1\41\1\0"+
    "\12\41\1\152\13\41\3\0\1\41\4\0\1\41\6\0"+
    "\1\4\2\0\1\4\4\0\1\41\1\0\1\153\25\4"+
    "\3\0\1\4\4\0\1\4\21\0\1\154\57\0\1\155"+
    "\60\0\1\156\77\0\1\157\32\0\1\160\56\0\1\161"+
    "\57\0\1\162\42\0\1\4\2\0\1\4\4\0\1\41"+
    "\1\0\1\4\1\163\24\4\3\0\1\4\4\0\1\4"+
    "\24\0\1\164\40\0\1\4\2\0\1\4\4\0\1\41"+
    "\1\0\4\4\1\165\21\4\3\0\1\4\4\0\1\4"+
    "\6\0\1\41\2\0\1\41\4\0\1\41\1\0\4\41"+
    "\1\166\21\41\3\0\1\41\4\0\1\41\6\0\1\4"+
    "\2\0\1\4\4\0\1\41\1\0\1\4\1\167\24\4"+
    "\3\0\1\4\4\0\1\4\35\0\1\170\42\0\1\171"+
    "\55\0\1\161\67\0\1\171\53\0\1\172\63\0\1\173"+
    "\47\0\1\174\40\0\1\4\2\0\1\4\4\0\1\41"+
    "\1\0\2\4\1\175\23\4\3\0\1\4\4\0\1\4"+
    "\22\0\1\176\42\0\1\4\2\0\1\4\4\0\1\41"+
    "\1\0\2\4\1\177\23\4\3\0\1\4\4\0\1\4"+
    "\6\0\1\41\2\0\1\41\4\0\1\41\1\0\2\41"+
    "\1\200\23\41\3\0\1\41\4\0\1\41\3\0\1\201"+
    "\1\0\1\201\1\202\1\201\1\0\1\202\4\201\1\203"+
    "\1\201\26\202\3\201\1\202\4\201\1\202\3\201\26\0"+
    "\1\173\62\0\1\174\42\0\1\174\106\0\1\124\40\0"+
    "\1\204\31\0\1\4\2\0\1\4\4\0\1\41\1\0"+
    "\1\205\25\4\3\0\1\4\4\0\1\4\21\0\1\206"+
    "\43\0\1\4\2\0\1\4\4\0\1\41\1\0\1\4"+
    "\1\207\24\4\3\0\1\4\4\0\1\4\6\0\1\41"+
    "\2\0\1\41\4\0\1\41\1\0\1\41\1\210\24\41"+
    "\3\0\1\41\4\0\1\41\20\0\1\211\44\0\1\4"+
    "\2\0\1\4\4\0\1\41\1\0\1\212\25\4\3\0"+
    "\1\4\4\0\1\4\6\0\1\41\2\0\1\41\4\0"+
    "\1\41\1\0\1\213\25\41\3\0\1\41\4\0\1\41"+
    "\21\0\1\173\43\0\1\4\2\0\1\4\4\0\1\41"+
    "\1\0\4\4\1\214\21\4\3\0\1\4\4\0\1\4"+
    "\20\0\1\215\44\0\1\4\2\0\1\4\4\0\1\41"+
    "\1\0\1\216\25\4\3\0\1\4\4\0\1\4\6\0"+
    "\1\41\2\0\1\41\4\0\1\41\1\0\1\217\25\41"+
    "\3\0\1\41\4\0\1\41\33\0\1\220\31\0\1\4"+
    "\2\0\1\4\4\0\1\41\1\0\13\4\1\221\12\4"+
    "\3\0\1\4\4\0\1\4\6\0\1\41\2\0\1\41"+
    "\4\0\1\41\1\0\13\41\1\222\12\41\3\0\1\41"+
    "\4\0\1\41\6\0\1\4\2\0\1\4\4\0\1\41"+
    "\1\0\7\4\1\223\16\4\3\0\1\4\4\0\1\4"+
    "\33\0\1\224\31\0\1\4\2\0\1\4\4\0\1\41"+
    "\1\0\13\4\1\225\12\4\3\0\1\4\4\0\1\4"+
    "\6\0\1\41\2\0\1\41\4\0\1\41\1\0\13\41"+
    "\1\226\12\41\3\0\1\41\4\0\1\41\27\0\1\227"+
    "\35\0\1\4\2\0\1\4\4\0\1\41\1\0\7\4"+
    "\1\230\16\4\3\0\1\4\4\0\1\4\6\0\1\41"+
    "\2\0\1\41\4\0\1\41\1\0\7\41\1\231\16\41"+
    "\3\0\1\41\4\0\1\41\6\0\1\4\2\0\1\4"+
    "\4\0\1\41\1\0\23\4\1\232\2\4\3\0\1\4"+
    "\4\0\1\4\27\0\1\233\35\0\1\4\2\0\1\4"+
    "\4\0\1\41\1\0\7\4\1\234\16\4\3\0\1\4"+
    "\4\0\1\4\6\0\1\41\2\0\1\41\4\0\1\41"+
    "\1\0\7\41\1\235\16\41\3\0\1\41\4\0\1\41"+
    "\22\0\1\236\42\0\1\4\2\0\1\4\4\0\1\41"+
    "\1\0\2\4\1\237\23\4\3\0\1\4\4\0\1\4"+
    "\6\0\1\41\2\0\1\41\4\0\1\41\1\0\2\41"+
    "\1\240\23\41\3\0\1\41\4\0\1\41\22\0\1\241"+
    "\42\0\1\4\2\0\1\4\4\0\1\41\1\0\2\4"+
    "\1\242\23\4\3\0\1\4\4\0\1\4\6\0\1\41"+
    "\2\0\1\41\4\0\1\41\1\0\2\41\1\243\23\41"+
    "\3\0\1\41\4\0\1\41\35\0\1\244\27\0\1\4"+
    "\2\0\1\4\4\0\1\41\1\0\15\4\1\245\10\4"+
    "\3\0\1\4\4\0\1\4\6\0\1\41\2\0\1\41"+
    "\4\0\1\41\1\0\15\41\1\246\10\41\3\0\1\41"+
    "\4\0\1\41\21\0\1\247\43\0\1\4\2\0\1\4"+
    "\4\0\1\41\1\0\1\4\1\250\24\4\3\0\1\4"+
    "\4\0\1\4\6\0\1\41\2\0\1\41\4\0\1\41"+
    "\1\0\1\41\1\251\24\41\3\0\1\41\4\0\1\41"+
    "\36\0\1\241\26\0\1\4\2\0\1\4\4\0\1\41"+
    "\1\0\16\4\1\242\7\4\3\0\1\4\4\0\1\4"+
    "\6\0\1\41\2\0\1\41\4\0\1\41\1\0\16\41"+
    "\1\243\7\41\3\0\1\41\4\0\1\41\3\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[6862];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\4\1\1\11\3\1\1\11\14\1\1\11"+
    "\1\1\4\11\1\1\2\11\2\1\1\0\1\11\4\0"+
    "\15\1\1\0\2\11\13\1\1\0\1\11\10\1\1\0"+
    "\5\1\1\0\3\1\1\0\2\1\1\0\3\1\7\0"+
    "\2\1\1\0\3\1\7\0\1\1\1\0\3\1\3\0"+
    "\1\1\1\0\1\1\1\0\2\1\1\0\2\1\1\0"+
    "\1\1\1\0\2\1\1\0\3\1\1\0\2\1\1\0"+
    "\3\1\1\0\2\1\1\0\3\1\1\0\2\1\1\0"+
    "\2\1\1\0\2\1\1\0\2\1\1\11\2\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[169];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  public FirebaseRulesLexer() {
    this((java.io.Reader)null);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  FirebaseRulesLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return com.intellij.psi.TokenType.BAD_CHARACTER;
            } 
            // fall through
          case 29: break;
          case 2: 
            { return com.intellij.psi.TokenType.WHITE_SPACE;
            } 
            // fall through
          case 30: break;
          case 3: 
            { return PATH_NAME;
            } 
            // fall through
          case 31: break;
          case 4: 
            { return COMMENT;
            } 
            // fall through
          case 32: break;
          case 5: 
            { return DOT;
            } 
            // fall through
          case 33: break;
          case 6: 
            { return EQ;
            } 
            // fall through
          case 34: break;
          case 7: 
            { return SLASH;
            } 
            // fall through
          case 35: break;
          case 8: 
            { return LEFT_BRACE;
            } 
            // fall through
          case 36: break;
          case 9: 
            { return RIGHT_BRACE;
            } 
            // fall through
          case 37: break;
          case 10: 
            { return COMMA;
            } 
            // fall through
          case 38: break;
          case 11: 
            { return LP;
            } 
            // fall through
          case 39: break;
          case 12: 
            { return RP;
            } 
            // fall through
          case 40: break;
          case 13: 
            { return LB;
            } 
            // fall through
          case 41: break;
          case 14: 
            { return RB;
            } 
            // fall through
          case 42: break;
          case 15: 
            { return COLON;
            } 
            // fall through
          case 43: break;
          case 16: 
            { return DOT_COMMA;
            } 
            // fall through
          case 44: break;
          case 17: 
            { return COMPMETA;
            } 
            // fall through
          case 45: break;
          case 18: 
            { return NUMBER;
            } 
            // fall through
          case 46: break;
          case 19: 
            { return STRING;
            } 
            // fall through
          case 47: break;
          case 20: 
            { return OP;
            } 
            // fall through
          case 48: break;
          case 21: 
            { return VERSIONS;
            } 
            // fall through
          case 49: break;
          case 22: 
            { return PERMISSION;
            } 
            // fall through
          case 50: break;
          case 23: 
            { return PATH_VARIABLE;
            } 
            // fall through
          case 51: break;
          case 24: 
            { return ALLOW;
            } 
            // fall through
          case 52: break;
          case 25: 
            { return MATCH;
            } 
            // fall through
          case 53: break;
          case 26: 
            { return SERVICE;
            } 
            // fall through
          case 54: break;
          case 27: 
            { return RULES_VERSION;
            } 
            // fall through
          case 55: break;
          case 28: 
            { return SERVICE_NAME;
            } 
            // fall through
          case 56: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
