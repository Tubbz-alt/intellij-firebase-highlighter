/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

// Copyright 2000-2020 JetBrains s.r.o. and other contributors. Use of this source code is governed by the Apache 2.0 license that can be found in the LICENSE file.
package co.anbora.labs.firebase.syntax;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import static co.anbora.labs.firebase.syntax.psi.FirebaseRulesTypes.*;
import com.intellij.psi.TokenType;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>FirebaseRules.flex</tt>
 */
class FirebaseRulesLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [9, 6, 6]
   * Total runtime size is 1568 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[ZZ_CMAP_Z[ch>>12]|((ch>>6)&0x3f)]<<6)|(ch&0x3f)];
  }

  /* The ZZ_CMAP_Z table has 272 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\100\1\200\u010d\100");

  /* The ZZ_CMAP_Y table has 192 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\1\2\175\3\1\4\77\3");

  /* The ZZ_CMAP_A table has 320 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\2\4\1\22\0\1\2\1\0\1\23\1\14\3\0\1\21\1\62\1\63\1\27\1\0\1\25\1\32"+
    "\1\20\1\24\1\17\2\61\7\17\1\67\1\70\1\0\1\33\1\66\2\0\4\31\1\11\3\31\1\3\4"+
    "\31\1\4\1\6\1\5\1\31\1\7\1\31\1\10\1\13\2\31\1\12\2\31\1\64\1\22\1\65\1\0"+
    "\1\57\1\0\1\52\1\51\1\42\1\46\1\36\1\47\1\53\1\55\1\41\2\34\1\43\1\54\1\60"+
    "\1\44\2\34\1\37\1\35\1\50\1\45\1\40\1\56\3\34\1\26\1\0\1\30\7\0\1\15\242\0"+
    "\2\16\26\0");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\4\3\1\4\1\5\1\6\1\7"+
    "\2\1\1\10\1\11\1\12\1\13\1\10\1\14\7\10"+
    "\1\15\1\16\1\17\1\20\1\21\1\22\2\3\1\23"+
    "\1\10\1\3\1\6\1\0\1\24\4\0\2\25\1\0"+
    "\1\25\1\26\6\10\1\3\1\27\1\23\1\25\1\0"+
    "\7\10\1\3\2\0\1\25\6\10\1\3\4\10\1\30"+
    "\1\31\1\32\2\10\1\0\1\10\1\23\2\10\1\33"+
    "\1\10\1\0\1\10\1\23\3\10\1\0\1\10\1\23"+
    "\3\10\1\0\1\10\1\23\1\10\1\0\1\10\1\23"+
    "\2\10\1\0\1\10\1\23\1\10\1\0\1\10\1\23"+
    "\2\10\1\0\1\10\1\23\1\10\1\0\1\10\1\23"+
    "\2\10\1\0\1\10\1\23\1\10\1\0\1\10\1\23"+
    "\1\10\1\34\1\0\1\10\1\23\1\10\1\0\1\10"+
    "\1\23\1\10\1\0\1\10\1\23\1\10\1\0\1\10"+
    "\1\23\1\10\4\35";

  private static int [] zzUnpackAction() {
    int [] result = new int[162];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\71\0\162\0\253\0\344\0\u011d\0\u0156\0\u018f"+
    "\0\71\0\u01c8\0\u0201\0\u023a\0\u0273\0\u02ac\0\u02e5\0\71"+
    "\0\71\0\u031e\0\u02e5\0\u0357\0\u0390\0\u03c9\0\u0402\0\u043b"+
    "\0\u0474\0\u04ad\0\71\0\71\0\71\0\71\0\71\0\71"+
    "\0\u04e6\0\u0201\0\u02e5\0\u051f\0\u0558\0\u0591\0\u05ca\0\71"+
    "\0\u0603\0\u063c\0\u0273\0\u0675\0\u06ae\0\u06e7\0\u0720\0\u0759"+
    "\0\71\0\u0792\0\u07cb\0\u0804\0\u083d\0\u0876\0\u08af\0\u08e8"+
    "\0\71\0\u0921\0\u095a\0\u0993\0\u09cc\0\u0a05\0\u0a3e\0\u0a77"+
    "\0\u0ab0\0\u0ae9\0\u0b22\0\u0b5b\0\u0b94\0\u0bcd\0\u0c06\0\u0c3f"+
    "\0\u0c78\0\u0cb1\0\u0cea\0\u0d23\0\u0d5c\0\u0d95\0\u0dce\0\u0e07"+
    "\0\u0e40\0\u0e79\0\u0357\0\u0357\0\344\0\u0eb2\0\u0eeb\0\u0f24"+
    "\0\u0f5d\0\u0f96\0\u0fcf\0\u1008\0\u0357\0\u1041\0\u107a\0\u10b3"+
    "\0\u10ec\0\u1125\0\u115e\0\u1197\0\u11d0\0\u1209\0\u1242\0\u127b"+
    "\0\u12b4\0\u12ed\0\u1326\0\u135f\0\u1398\0\u13d1\0\u140a\0\u1443"+
    "\0\u147c\0\u14b5\0\u14ee\0\u1527\0\u1560\0\u1599\0\u15d2\0\u160b"+
    "\0\u1644\0\u167d\0\u16b6\0\u16ef\0\u1728\0\u1761\0\u179a\0\u17d3"+
    "\0\u180c\0\u1845\0\u187e\0\u18b7\0\u18f0\0\u1929\0\u1962\0\u199b"+
    "\0\u19d4\0\u1a0d\0\u1a46\0\u1a7f\0\u1ab8\0\u0357\0\u1af1\0\u1b2a"+
    "\0\u1b63\0\u1b9c\0\u1bd5\0\u1c0e\0\u1c47\0\u1c80\0\u1cb9\0\u1cf2"+
    "\0\u1d2b\0\u1d64\0\u1d9d\0\u1dd6\0\u1e0f\0\u1e48\0\71\0\u0357"+
    "\0\u02e5\0\u051f";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[162];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\4\2\5\1\6\2\5\1\7\2\5"+
    "\1\10\1\2\1\11\1\12\1\13\1\14\1\2\1\15"+
    "\1\16\1\17\1\20\1\2\1\21\1\5\1\22\1\23"+
    "\1\24\1\25\1\24\1\26\2\24\1\27\4\24\1\30"+
    "\2\24\1\31\1\24\1\32\2\24\1\5\1\24\1\12"+
    "\1\33\1\34\1\35\1\36\1\2\1\37\1\40\72\0"+
    "\2\3\71\0\1\5\1\41\7\5\3\0\1\5\1\42"+
    "\3\0\1\24\1\43\3\0\1\5\1\44\1\43\23\24"+
    "\1\5\1\24\1\5\12\0\11\5\3\0\1\5\1\42"+
    "\3\0\1\24\1\43\3\0\1\5\1\44\1\43\23\24"+
    "\1\5\1\24\1\5\12\0\10\5\1\45\3\0\1\5"+
    "\1\42\3\0\1\24\1\43\3\0\1\5\1\44\1\43"+
    "\23\24\1\5\1\24\1\5\12\0\7\5\1\41\1\5"+
    "\3\0\1\5\1\42\3\0\1\24\1\43\3\0\1\5"+
    "\1\44\1\43\23\24\1\5\1\24\1\5\7\0\1\10"+
    "\1\0\13\10\2\0\52\10\3\0\11\5\3\0\1\12"+
    "\1\46\3\0\1\24\1\43\3\0\1\5\1\44\1\43"+
    "\23\24\1\5\1\24\1\12\12\0\11\42\3\0\2\42"+
    "\10\0\1\42\25\0\1\42\1\0\1\42\7\0\21\47"+
    "\1\50\1\51\36\47\1\52\7\47\22\53\1\54\1\50"+
    "\45\53\3\0\11\55\3\0\1\55\4\0\1\24\1\56"+
    "\1\57\2\0\1\55\1\60\1\43\26\55\12\0\11\43"+
    "\3\0\1\43\4\0\2\43\3\0\1\43\1\0\27\43"+
    "\12\0\11\44\3\0\1\44\4\0\1\44\4\0\2\44"+
    "\1\0\26\44\4\0\1\61\5\0\11\24\3\0\1\24"+
    "\4\0\1\24\1\43\3\0\1\24\1\44\1\43\26\24"+
    "\12\0\11\24\3\0\1\24\4\0\1\24\1\43\3\0"+
    "\1\24\1\44\1\43\2\24\1\62\23\24\12\0\11\24"+
    "\3\0\1\24\4\0\1\24\1\43\3\0\1\24\1\44"+
    "\1\43\11\24\1\63\14\24\12\0\11\24\3\0\1\24"+
    "\4\0\1\24\1\43\3\0\1\24\1\44\1\43\7\24"+
    "\1\64\16\24\12\0\11\24\3\0\1\24\4\0\1\24"+
    "\1\43\3\0\1\24\1\44\1\43\5\24\1\65\20\24"+
    "\12\0\11\24\3\0\1\24\4\0\1\24\1\43\3\0"+
    "\1\24\1\44\1\43\7\24\1\66\16\24\12\0\11\24"+
    "\3\0\1\24\4\0\1\24\1\43\3\0\1\24\1\44"+
    "\1\43\16\24\1\67\7\24\12\0\2\5\1\70\6\5"+
    "\3\0\1\5\1\42\3\0\1\24\1\43\3\0\1\5"+
    "\1\44\1\43\23\24\1\5\1\24\1\5\12\0\11\44"+
    "\3\0\1\44\4\0\1\44\4\0\2\44\1\0\26\44"+
    "\12\0\5\5\1\41\3\5\3\0\1\5\1\42\3\0"+
    "\1\24\1\43\3\0\1\5\1\44\1\43\23\24\1\5"+
    "\1\24\1\5\12\0\11\42\3\0\1\46\1\42\10\0"+
    "\1\42\25\0\1\42\1\0\1\46\7\0\21\47\1\50"+
    "\1\51\47\47\1\0\13\47\2\0\73\47\1\71\1\51"+
    "\46\47\1\53\1\0\13\53\2\0\52\53\3\0\11\55"+
    "\3\0\1\55\4\0\1\16\1\56\3\0\1\55\1\60"+
    "\1\43\26\55\12\0\11\56\3\0\1\56\4\0\1\72"+
    "\1\56\3\0\1\56\1\73\1\43\26\56\12\0\11\74"+
    "\3\0\1\74\5\0\1\74\3\0\2\74\1\0\26\74"+
    "\12\0\11\60\3\0\1\60\4\0\1\75\1\73\3\0"+
    "\2\60\1\0\26\60\12\0\11\24\3\0\1\24\4\0"+
    "\1\24\1\43\3\0\1\24\1\44\1\43\3\24\1\76"+
    "\22\24\12\0\11\24\3\0\1\24\4\0\1\24\1\43"+
    "\3\0\1\24\1\44\1\43\7\24\1\77\16\24\12\0"+
    "\11\24\3\0\1\24\4\0\1\24\1\43\3\0\1\24"+
    "\1\44\1\43\10\24\1\100\15\24\12\0\11\24\3\0"+
    "\1\24\4\0\1\24\1\43\3\0\1\24\1\44\1\43"+
    "\3\24\1\101\22\24\12\0\11\24\3\0\1\24\4\0"+
    "\1\24\1\43\3\0\1\24\1\44\1\43\7\24\1\102"+
    "\16\24\12\0\11\24\3\0\1\24\4\0\1\24\1\43"+
    "\3\0\1\24\1\44\1\43\14\24\1\103\11\24\12\0"+
    "\3\5\1\104\5\5\3\0\1\5\1\42\3\0\1\24"+
    "\1\43\3\0\1\5\1\44\1\43\23\24\1\5\1\24"+
    "\1\5\12\0\11\56\3\0\1\56\4\0\1\43\1\56"+
    "\1\57\2\0\1\56\1\73\1\43\26\56\12\0\11\73"+
    "\3\0\1\73\4\0\1\105\1\73\3\0\2\73\1\0"+
    "\26\73\12\0\11\74\3\0\1\74\5\0\1\74\1\0"+
    "\1\106\1\107\2\74\1\106\26\74\12\0\11\60\3\0"+
    "\1\60\4\0\1\44\1\73\1\57\2\0\2\60\1\0"+
    "\26\60\12\0\11\24\3\0\1\24\4\0\1\24\1\43"+
    "\3\0\1\24\1\44\1\43\4\24\1\110\21\24\12\0"+
    "\11\24\3\0\1\24\4\0\1\24\1\43\3\0\1\24"+
    "\1\44\1\43\2\24\1\111\23\24\12\0\11\24\3\0"+
    "\1\24\4\0\1\24\1\43\3\0\1\24\1\44\1\43"+
    "\11\24\1\112\14\24\12\0\11\24\3\0\1\24\4\0"+
    "\1\24\1\43\3\0\1\24\1\44\1\43\2\24\1\113"+
    "\23\24\12\0\11\24\3\0\1\24\4\0\1\24\1\43"+
    "\3\0\1\24\1\44\1\43\10\24\1\114\15\24\12\0"+
    "\11\24\3\0\1\24\4\0\1\24\1\43\3\0\1\24"+
    "\1\44\1\43\6\24\1\115\17\24\12\0\4\5\1\116"+
    "\4\5\3\0\1\5\1\42\3\0\1\24\1\43\3\0"+
    "\1\5\1\44\1\43\23\24\1\5\1\24\1\5\12\0"+
    "\11\73\3\0\1\73\5\0\1\73\1\57\2\0\2\73"+
    "\1\0\26\73\37\0\1\107\64\0\1\105\47\0\11\24"+
    "\3\0\1\24\4\0\1\24\1\43\3\0\1\24\1\44"+
    "\1\43\5\24\1\117\20\24\12\0\11\24\3\0\1\24"+
    "\4\0\1\24\1\43\3\0\1\24\1\44\1\43\1\24"+
    "\1\120\24\24\12\0\11\24\3\0\1\24\4\0\1\24"+
    "\1\43\3\0\1\24\1\44\1\43\12\24\1\121\13\24"+
    "\12\0\11\24\3\0\1\24\4\0\1\24\1\43\3\0"+
    "\1\24\1\44\1\43\15\24\1\122\10\24\12\0\11\24"+
    "\3\0\1\24\4\0\1\24\1\43\3\0\1\24\1\44"+
    "\1\43\22\24\1\123\3\24\12\0\11\24\3\0\1\24"+
    "\4\0\1\24\1\43\3\0\1\24\1\44\1\43\21\24"+
    "\1\124\4\24\12\0\5\5\1\125\3\5\3\0\1\5"+
    "\1\42\3\0\1\24\1\43\3\0\1\5\1\44\1\43"+
    "\23\24\1\5\1\24\1\5\12\0\11\24\3\0\1\24"+
    "\4\0\1\24\1\43\3\0\1\24\1\44\1\43\6\24"+
    "\1\126\17\24\12\0\11\24\3\0\1\24\4\0\1\24"+
    "\1\43\3\0\1\24\1\44\1\43\23\24\1\127\2\24"+
    "\7\0\1\130\1\0\1\130\11\131\1\130\2\0\1\131"+
    "\4\130\1\131\1\132\3\130\1\131\1\133\1\132\26\131"+
    "\7\130\3\0\11\24\3\0\1\24\4\0\1\24\1\43"+
    "\3\0\1\24\1\44\1\43\16\24\1\134\7\24\12\0"+
    "\11\24\3\0\1\24\4\0\1\24\1\43\3\0\1\24"+
    "\1\44\1\43\2\24\1\135\23\24\12\0\11\24\3\0"+
    "\1\24\4\0\1\24\1\43\3\0\1\24\1\44\1\43"+
    "\4\24\1\136\21\24\56\0\1\137\24\0\11\24\3\0"+
    "\1\24\4\0\1\24\1\43\3\0\1\24\1\44\1\43"+
    "\13\24\1\140\12\24\12\0\11\43\3\0\1\43\4\0"+
    "\2\43\3\0\1\43\1\0\14\43\1\141\12\43\12\0"+
    "\11\44\3\0\1\44\4\0\1\44\4\0\2\44\1\0"+
    "\13\44\1\142\12\44\12\0\11\24\3\0\1\24\4\0"+
    "\1\24\1\43\3\0\1\24\1\44\1\43\1\24\1\143"+
    "\24\24\12\0\11\24\3\0\1\24\4\0\1\24\1\43"+
    "\3\0\1\24\1\44\1\43\2\24\1\144\23\24\50\0"+
    "\1\145\32\0\11\24\3\0\1\24\4\0\1\24\1\43"+
    "\3\0\1\24\1\44\1\43\5\24\1\146\20\24\12\0"+
    "\11\43\3\0\1\43\4\0\2\43\3\0\1\43\1\0"+
    "\6\43\1\147\20\43\12\0\11\44\3\0\1\44\4\0"+
    "\1\44\4\0\2\44\1\0\5\44\1\150\20\44\12\0"+
    "\11\24\3\0\1\24\4\0\1\24\1\43\3\0\1\24"+
    "\1\44\1\43\2\24\1\151\23\24\12\0\11\24\3\0"+
    "\1\24\4\0\1\24\1\43\3\0\1\24\1\44\1\43"+
    "\3\24\1\152\22\24\46\0\1\153\34\0\11\24\3\0"+
    "\1\24\4\0\1\24\1\43\3\0\1\24\1\44\1\43"+
    "\3\24\1\154\22\24\12\0\11\43\3\0\1\43\4\0"+
    "\2\43\3\0\1\43\1\0\4\43\1\155\22\43\12\0"+
    "\11\44\3\0\1\44\4\0\1\44\4\0\2\44\1\0"+
    "\3\44\1\156\22\44\7\0\1\157\1\0\1\157\11\160"+
    "\1\157\2\0\1\160\4\157\1\160\1\161\3\157\1\160"+
    "\1\162\1\161\26\160\7\157\3\0\11\24\3\0\1\24"+
    "\4\0\1\24\1\43\3\0\1\24\1\44\1\43\1\24"+
    "\1\163\24\24\45\0\1\164\35\0\11\24\3\0\1\24"+
    "\4\0\1\24\1\43\3\0\1\24\1\44\1\43\2\24"+
    "\1\165\23\24\12\0\11\43\3\0\1\43\4\0\2\43"+
    "\3\0\1\43\1\0\3\43\1\166\23\43\12\0\11\44"+
    "\3\0\1\44\4\0\1\44\4\0\2\44\1\0\2\44"+
    "\1\167\23\44\44\0\1\170\36\0\11\24\3\0\1\24"+
    "\4\0\1\24\1\43\3\0\1\24\1\44\1\43\1\24"+
    "\1\171\24\24\12\0\11\43\3\0\1\43\4\0\2\43"+
    "\3\0\1\43\1\0\2\43\1\172\24\43\12\0\11\44"+
    "\3\0\1\44\4\0\1\44\4\0\2\44\1\0\1\44"+
    "\1\173\24\44\12\0\11\24\3\0\1\24\4\0\1\24"+
    "\1\43\3\0\1\24\1\44\1\43\5\24\1\174\20\24"+
    "\44\0\1\175\36\0\11\24\3\0\1\24\4\0\1\24"+
    "\1\43\3\0\1\24\1\44\1\43\1\24\1\176\24\24"+
    "\12\0\11\43\3\0\1\43\4\0\2\43\3\0\1\43"+
    "\1\0\2\43\1\177\24\43\12\0\11\44\3\0\1\44"+
    "\4\0\1\44\4\0\2\44\1\0\1\44\1\200\24\44"+
    "\57\0\1\201\23\0\11\24\3\0\1\24\4\0\1\24"+
    "\1\43\3\0\1\24\1\44\1\43\14\24\1\202\11\24"+
    "\12\0\11\43\3\0\1\43\4\0\2\43\3\0\1\43"+
    "\1\0\15\43\1\203\11\43\12\0\11\44\3\0\1\44"+
    "\4\0\1\44\4\0\2\44\1\0\14\44\1\204\11\44"+
    "\12\0\11\24\3\0\1\24\4\0\1\24\1\43\3\0"+
    "\1\24\1\44\1\43\10\24\1\205\15\24\57\0\1\206"+
    "\23\0\11\24\3\0\1\24\4\0\1\24\1\43\3\0"+
    "\1\24\1\44\1\43\14\24\1\207\11\24\12\0\11\43"+
    "\3\0\1\43\4\0\2\43\3\0\1\43\1\0\15\43"+
    "\1\210\11\43\12\0\11\44\3\0\1\44\4\0\1\44"+
    "\4\0\2\44\1\0\14\44\1\211\11\44\53\0\1\212"+
    "\27\0\11\24\3\0\1\24\4\0\1\24\1\43\3\0"+
    "\1\24\1\44\1\43\10\24\1\213\15\24\12\0\11\43"+
    "\3\0\1\43\4\0\2\43\3\0\1\43\1\0\11\43"+
    "\1\214\15\43\12\0\11\44\3\0\1\44\4\0\1\44"+
    "\4\0\2\44\1\0\10\44\1\215\15\44\12\0\11\24"+
    "\3\0\1\24\4\0\1\24\1\43\3\0\1\24\1\44"+
    "\1\43\24\24\1\216\1\24\53\0\1\217\27\0\11\24"+
    "\3\0\1\24\4\0\1\24\1\43\3\0\1\24\1\44"+
    "\1\43\10\24\1\220\15\24\12\0\11\43\3\0\1\43"+
    "\4\0\2\43\3\0\1\43\1\0\11\43\1\221\15\43"+
    "\12\0\11\44\3\0\1\44\4\0\1\44\4\0\2\44"+
    "\1\0\10\44\1\222\15\44\46\0\1\223\34\0\11\24"+
    "\3\0\1\24\4\0\1\24\1\43\3\0\1\24\1\44"+
    "\1\43\3\24\1\224\22\24\12\0\11\43\3\0\1\43"+
    "\4\0\2\43\3\0\1\43\1\0\4\43\1\225\22\43"+
    "\12\0\11\44\3\0\1\44\4\0\1\44\4\0\2\44"+
    "\1\0\3\44\1\226\22\44\46\0\1\227\34\0\11\24"+
    "\3\0\1\24\4\0\1\24\1\43\3\0\1\24\1\44"+
    "\1\43\3\24\1\230\22\24\12\0\11\43\3\0\1\43"+
    "\4\0\2\43\3\0\1\43\1\0\4\43\1\231\22\43"+
    "\12\0\11\44\3\0\1\44\4\0\1\44\4\0\2\44"+
    "\1\0\3\44\1\232\22\44\61\0\1\233\21\0\11\24"+
    "\3\0\1\24\4\0\1\24\1\43\3\0\1\24\1\44"+
    "\1\43\16\24\1\234\7\24\12\0\11\43\3\0\1\43"+
    "\4\0\2\43\3\0\1\43\1\0\17\43\1\235\7\43"+
    "\12\0\11\44\3\0\1\44\4\0\1\44\4\0\2\44"+
    "\1\0\16\44\1\236\7\44\45\0\1\237\35\0\11\24"+
    "\3\0\1\24\4\0\1\24\1\43\3\0\1\24\1\44"+
    "\1\43\2\24\1\240\23\24\12\0\11\43\3\0\1\43"+
    "\4\0\2\43\3\0\1\43\1\0\3\43\1\241\23\43"+
    "\12\0\11\44\3\0\1\44\4\0\1\44\4\0\2\44"+
    "\1\0\2\44\1\242\23\44\62\0\1\227\20\0\11\24"+
    "\3\0\1\24\4\0\1\24\1\43\3\0\1\24\1\44"+
    "\1\43\17\24\1\230\6\24\12\0\11\43\3\0\1\43"+
    "\4\0\2\43\3\0\1\43\1\0\20\43\1\231\6\43"+
    "\12\0\11\44\3\0\1\44\4\0\1\44\4\0\2\44"+
    "\1\0\17\44\1\232\6\44\7\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[7809];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\6\1\1\11\6\1\2\11\11\1\6\11"+
    "\6\1\1\0\1\11\4\0\2\1\1\0\1\1\1\11"+
    "\7\1\1\11\2\1\1\0\10\1\2\0\21\1\1\0"+
    "\6\1\1\0\5\1\1\0\5\1\1\0\3\1\1\0"+
    "\4\1\1\0\3\1\1\0\4\1\1\0\3\1\1\0"+
    "\4\1\1\0\3\1\1\0\4\1\1\0\3\1\1\0"+
    "\3\1\1\0\3\1\1\0\3\1\1\11\3\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[162];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  public FirebaseRulesLexer() {
    this((java.io.Reader)null);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  FirebaseRulesLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return com.intellij.psi.TokenType.BAD_CHARACTER;
            } 
            // fall through
          case 30: break;
          case 2: 
            { return com.intellij.psi.TokenType.WHITE_SPACE;
            } 
            // fall through
          case 31: break;
          case 3: 
            { return PORTNAME;
            } 
            // fall through
          case 32: break;
          case 4: 
            { return COMMENT;
            } 
            // fall through
          case 33: break;
          case 5: 
            { return CHAR;
            } 
            // fall through
          case 34: break;
          case 6: 
            { return NUMBER;
            } 
            // fall through
          case 35: break;
          case 7: 
            { return DOT;
            } 
            // fall through
          case 36: break;
          case 8: 
            { return NODENAME;
            } 
            // fall through
          case 37: break;
          case 9: 
            { return COMMA;
            } 
            // fall through
          case 38: break;
          case 10: 
            { return LEFT_BRACE;
            } 
            // fall through
          case 39: break;
          case 11: 
            { return RIGHT_BRACE;
            } 
            // fall through
          case 40: break;
          case 12: 
            { return EQ;
            } 
            // fall through
          case 41: break;
          case 13: 
            { return LP;
            } 
            // fall through
          case 42: break;
          case 14: 
            { return RP;
            } 
            // fall through
          case 43: break;
          case 15: 
            { return LB;
            } 
            // fall through
          case 44: break;
          case 16: 
            { return RB;
            } 
            // fall through
          case 45: break;
          case 17: 
            { return COLON;
            } 
            // fall through
          case 46: break;
          case 18: 
            { return DOT_COMMA;
            } 
            // fall through
          case 47: break;
          case 19: 
            { return COMPMETA;
            } 
            // fall through
          case 48: break;
          case 20: 
            { return STRING;
            } 
            // fall through
          case 49: break;
          case 21: 
            { return FULL_PATH;
            } 
            // fall through
          case 50: break;
          case 22: 
            { return OP;
            } 
            // fall through
          case 51: break;
          case 23: 
            { return VERSIONS;
            } 
            // fall through
          case 52: break;
          case 24: 
            { return ALLOW;
            } 
            // fall through
          case 53: break;
          case 25: 
            { return MATCH;
            } 
            // fall through
          case 54: break;
          case 26: 
            { return PORTTOKEN;
            } 
            // fall through
          case 55: break;
          case 27: 
            { return SERVICE;
            } 
            // fall through
          case 56: break;
          case 28: 
            { return RULES_VERSION;
            } 
            // fall through
          case 57: break;
          case 29: 
            { return SERVICE_NAME;
            } 
            // fall through
          case 58: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
