// Copyright 2000-2020 JetBrains s.r.o. and other contributors. Use of this source code is governed by the Apache 2.0 license that can be found in the LICENSE file.
{
  parserClass="co.anbora.labs.firebase.syntax.parser.FirebaseRulesParser"
  parserUtilClass="co.anbora.labs.firebase.syntax.FirebaseRulesParserUtil"
  extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

  psiClassPrefix="FirebaseRules"
  psiImplClassSuffix="Impl"
  psiPackage="co.anbora.labs.firebase.syntax.psi"
  psiImplPackage="co.anbora.labs.firebase.syntax.psi.impl"

  elementTypeHolderClass="co.anbora.labs.firebase.syntax.psi.FirebaseRulesTypes"
  elementTypeClass="co.anbora.labs.firebase.syntax.psi.FirebaseRulesElementType"
  tokenTypeClass="co.anbora.labs.firebase.syntax.psi.FirebaseRulesTokenType"
  psiImplUtilClass="co.anbora.labs.firebase.syntax.psi.impl.FBPPsiImplUtil"

  tokens = [
          WHITE_SPACE='regexp:\s+'
          LP = '('
          RP = ')'
          LB = '['
          RB = ']'
          portToken='regexp:(INPORT|EXPORT|OUTPORT)'
          comment='regexp:#.*'
          number='regexp:\d+(\.\d*)?'
  //        id='regexp:[a-zA-Z0-9_/]*'
          string="regexp:('([^'\\]|\\.)*'|\"([^\"\\]|\\.)*\")"
          op = '->'
          COLON = ':'
          COMMA = ','
          EQ = '='
          DOT = '.'
          char = 'regexp:[\n\r\u2028\u2029]'
  //        priv='regexp:[A-Za-z.0-9_]+'
  //        pub='regexp:[A-Z0-9_]+'
  //        portname='regexp:[A-Z.0-9_]+'
  //        nodename='regexp:[a-zA-Z0-9_\-/]+'
  //        comp='regexp:[a-zA-Z/\-0-9_]+'
  //        compMeta='regexp:[a-zA-Z=_\-,0-9]+'
      ]

}

root ::= root_item

private root_item ::= !<<eof>> property

property ::= RuleVersionStatement? ServiceStatement

RuleVersionStatement ::= RULES_VERSION EQ VERSIONS DOT_COMMA

ServiceStatement ::= SERVICE_KEYWORD SERVICE_NAME LEFT_BRACE (MatchStatement)+ RIGHT_BRACE

MatchStatement ::= MATCH_KEYWORD FullPathStatement LEFT_BRACE (AllowStatement|MatchStatement)+ RIGHT_BRACE

FullPathStatement ::= (SLASH PathStatement)+

PathStatement ::= (IDENTIFIER|PATH_VARIABLE)

AllowStatement ::= ALLOW_KEYWORD PermissionStatement COLON ConditionalStatement DOT_COMMA

PermissionStatement ::= PERMISSION

ConditionalStatement ::= IF_KEYWORD ConditionalExpression

ConditionalExpression ::= Expression (BooleanOperator Expression)*

ObjectStatement ::= IDENTIFIER(DOT IDENTIFIER)?

CallFunctionStatement ::= IDENTIFIER(DOT IDENTIFIER)?FunctionParameterStatement

FunctionParameterStatement ::= LP ObjectStatement(COMMA ObjectStatement)* RP

Expression ::= BooleanStatement
        | CallFunctionStatement
        | ObjectStatement
        | NullStatement

NullStatement ::= NULL_KEYWORD

BooleanOperator ::= (EQEQ|NE|OROR|ANDAND|LT|LE|GT|GE)

BooleanStatement ::= (TRUE_KEYWORD|FALSE_KEYWORD)